# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Greg Landrum
# This file is distributed under the same license as the The RDKit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The RDKit 2017.09\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-23 11:34+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../GettingStartedInPython.rst:2
msgid "Getting Started with the RDKit in Python"
msgstr ""

#: ../../GettingStartedInPython.rst:7
msgid "What is this?"
msgstr ""

#: ../../GettingStartedInPython.rst:9
msgid ""
"This document is intended to provide an overview of how one can use the "
"RDKit functionality from Python.  It's not comprehensive and it's not a "
"manual."
msgstr ""

#: ../../GettingStartedInPython.rst:13
msgid ""
"If you find mistakes, or have suggestions for improvements, please either"
" fix them yourselves in the source document (the .rst file) or send them "
"to the mailing list: rdkit-devel@lists.sourceforge.net In particular, if "
"you find yourself spending time working out how to do something that "
"doesn't appear to be documented please contribute by writing it up for "
"this document. Contributing to the documentation is a great service both "
"to the RDKit community and to your future self."
msgstr ""

#: ../../GettingStartedInPython.rst:22
msgid "Reading and Writing Molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:25
msgid "Reading single molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:27
msgid ""
"The majority of the basic molecular functionality is found in module "
":api:`rdkit.Chem`:"
msgstr ""

#: ../../GettingStartedInPython.rst:32
msgid "Individual molecules can be constructed using a variety of approaches:"
msgstr ""

#: ../../GettingStartedInPython.rst:39
msgid ""
"All of these functions return a :api:`rdkit.Chem.rdchem.Mol` object on "
"success:"
msgstr ""

#: ../../GettingStartedInPython.rst:44
msgid "or None on failure:"
msgstr ""

#: ../../GettingStartedInPython.rst:50
msgid "An attempt is made to provide sensible error messages:"
msgstr ""

#: ../../GettingStartedInPython.rst:54
msgid ""
"displays a message like: ``[12:18:01] Explicit valence for atom # 1 O "
"greater than permitted`` and"
msgstr ""

#: ../../GettingStartedInPython.rst:58
msgid ""
"displays something like: ``[12:20:41] Can't kekulize mol``. In each case "
"the value ``None`` is returned:"
msgstr ""

#: ../../GettingStartedInPython.rst:67
msgid "Reading sets of molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:69
msgid ""
"Groups of molecules are read using a Supplier (for example, an "
":api:`rdkit.Chem.rdmolfiles.SDMolSupplier` or a "
":api:`rdkit.Chem.rdmolfiles.SmilesMolSupplier`):"
msgstr ""

#: ../../GettingStartedInPython.rst:80
msgid "You can easily produce lists of molecules from a Supplier:"
msgstr ""

#: ../../GettingStartedInPython.rst:86
msgid "or just treat the Supplier itself as a random-access object:"
msgstr ""

#: ../../GettingStartedInPython.rst:91
msgid ""
"A good practice is to test each molecule to see if it was correctly read "
"before working with it:"
msgstr ""

#: ../../GettingStartedInPython.rst:103
msgid ""
"An alternate type of Supplier, the "
":api:`rdkit.Chem.rdmolfiles.ForwardSDMolSupplier` can be used to read "
"from file-like objects:"
msgstr ""

#: ../../GettingStartedInPython.rst:116
msgid "This means that they can be used to read from compressed files:"
msgstr ""

#: ../../GettingStartedInPython.rst:125
msgid "Note that ForwardSDMolSuppliers cannot be used as random-access objects:"
msgstr ""

#: ../../GettingStartedInPython.rst:134
msgid "Writing molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:136
msgid ""
"Single molecules can be converted to text using several functions present"
" in the :api:`rdkit.Chem` module."
msgstr ""

#: ../../GettingStartedInPython.rst:138
msgid "For example, for SMILES:"
msgstr ""

#: ../../GettingStartedInPython.rst:146
msgid ""
"Note that the SMILES provided is canonical, so the output should be the "
"same no matter how a particular molecule is input:"
msgstr ""

#: ../../GettingStartedInPython.rst:155
msgid ""
"If you'd like to have the Kekule form of the SMILES, first Kekulize the "
"molecule, then use the “kekuleSmiles” option:"
msgstr ""

#: ../../GettingStartedInPython.rst:161
msgid ""
"Note: as of this writing (Aug 2008), the smiles provided when one "
"requests kekuleSmiles are not canonical. The limitation is not in the "
"SMILES generation, but in the kekulization itself."
msgstr ""

#: ../../GettingStartedInPython.rst:164
msgid "MDL Mol blocks are also available:"
msgstr ""

#: ../../GettingStartedInPython.rst:183
msgid "To include names in the mol blocks, set the molecule's “_Name” property:"
msgstr ""

#: ../../GettingStartedInPython.rst:202
msgid ""
"In order for atom or bond stereochemistry to be recognised correctly by "
"most software, it's essential that the Mol block have atomic coordinates."
" It's also convenient for many reasons, such as drawing the molecules. "
"Coordinates can be generated using functionality in the "
":api:`rdkit.Chem.AllChem` module (see the `Chem vs AllChem`_ section for "
"more information)."
msgstr ""

#: ../../GettingStartedInPython.rst:209
msgid "You can either include 2D coordinates (i.e. a depiction):"
msgstr ""

#: ../../GettingStartedInPython.rst:230
msgid ""
"Or you can add 3D coordinates by embedding the molecule (we're using the "
"ETKDG method here, which is described in more detail below):"
msgstr ""

#: ../../GettingStartedInPython.rst:251
msgid ""
"To get good 3D conformations, it's almost always a good idea to add "
"hydrogens to the molecule first:"
msgstr ""

#: ../../GettingStartedInPython.rst:258
msgid "These can then be removed:"
msgstr ""

#: ../../GettingStartedInPython.rst:277
msgid "If you'd like to write the molecules to a file, use Python file objects:"
msgstr ""

#: ../../GettingStartedInPython.rst:284
msgid "Writing sets of molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:286
msgid ""
"Multiple molecules can be written to a file using an "
":api:`rdkit.Chem.rdmolfiles.SDWriter` object:"
msgstr ""

#: ../../GettingStartedInPython.rst:293
msgid "An SDWriter can also be initialized using a file-like object:"
msgstr ""

#: ../../GettingStartedInPython.rst:318
msgid ""
"Other available Writers include the "
":api:`rdkit.Chem.rdmolfiles.SmilesWriter` and the "
":api:`rdkit.Chem.rdmolfiles.TDTWriter`."
msgstr ""

#: ../../GettingStartedInPython.rst:322
msgid "Working with Molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:326
msgid "Looping over Atoms and Bonds"
msgstr ""

#: ../../GettingStartedInPython.rst:328
msgid "Once you have a molecule, it's easy to loop over its atoms and bonds:"
msgstr ""

#: ../../GettingStartedInPython.rst:340
msgid "You can also request individual bonds or atoms:"
msgstr ""

#: ../../GettingStartedInPython.rst:353
msgid "Atoms keep track of their neighbors:"
msgstr ""

#: ../../GettingStartedInPython.rst:363
msgid "Ring Information"
msgstr ""

#: ../../GettingStartedInPython.rst:365
msgid "Atoms and bonds both carry information about the molecule's rings:"
msgstr ""

#: ../../GettingStartedInPython.rst:383
msgid "But note that the information is only about the smallest rings:"
msgstr ""

#: ../../GettingStartedInPython.rst:388
msgid "More detail about the smallest set of smallest rings (SSSR) is available:"
msgstr ""

#: ../../GettingStartedInPython.rst:398
msgid ""
"As the name indicates, this is a symmetrized SSSR; if you are interested "
"in the number of “true” SSSR, use the GetSSSR function."
msgstr ""

#: ../../GettingStartedInPython.rst:404
msgid ""
"The distinction between symmetrized and non-symmetrized SSSR is discussed"
" in more detail below in the section `The SSSR Problem`_."
msgstr ""

#: ../../GettingStartedInPython.rst:406
msgid ""
"For more efficient queries about a molecule's ring systems (avoiding "
"repeated calls to Mol.GetAtomWithIdx), use the "
":api:`rdkit.Chem.rdchem.RingInfo` class:"
msgstr ""

#: ../../GettingStartedInPython.rst:422
msgid "Modifying molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:424
msgid ""
"Normally molecules are stored in the RDKit with the hydrogen atoms "
"implicit (e.g. not explicitly present in the molecular graph. When it is "
"useful to have the hydrogens explicitly present, for example when "
"generating or optimizing the 3D geometry, the "
":api:`rdkit.Chem.rdmolops.AddHs` function can be used:"
msgstr ""

#: ../../GettingStartedInPython.rst:434
msgid ""
"The Hs can be removed again using the :api:`rdkit.Chem.rdmolops.RemoveHs`"
" function:"
msgstr ""

#: ../../GettingStartedInPython.rst:440
msgid ""
"RDKit molecules are usually stored with the bonds in aromatic rings "
"having aromatic bond types. This can be changed with the "
":api:`rdkit.Chem.rdmolops.Kekulize` function:"
msgstr ""

#: ../../GettingStartedInPython.rst:452
msgid "By default, the bonds are still marked as being aromatic:"
msgstr ""

#: ../../GettingStartedInPython.rst:457
msgid ""
"because the flags in the original molecule are not cleared "
"(clearAromaticFlags defaults to False). You can explicitly force or "
"decline a clearing of the flags:"
msgstr ""

#: ../../GettingStartedInPython.rst:468
msgid ""
"Bonds can be restored to the aromatic bond type using the "
":api:`rdkit.Chem.rdmolops.SanitizeMol` function:"
msgstr ""

#: ../../GettingStartedInPython.rst:475
msgid ""
"The value returned by `SanitizeMol()` indicates that no problems were "
"encountered."
msgstr ""

#: ../../GettingStartedInPython.rst:478
msgid "Working with 2D molecules: Generating Depictions"
msgstr ""

#: ../../GettingStartedInPython.rst:480
msgid ""
"The RDKit has a library for generating depictions (sets of 2D) "
"coordinates for molecules. This library, which is part of the AllChem "
"module, is accessed using the "
":api:`rdkit.Chem.rdDepictor.Compute2DCoords` function:"
msgstr ""

#: ../../GettingStartedInPython.rst:487
msgid ""
"The 2D conformation is constructed in a canonical orientation and is "
"built to minimize intramolecular clashes, i.e. to maximize the clarity of"
" the drawing."
msgstr ""

#: ../../GettingStartedInPython.rst:491
msgid ""
"If you have a set of molecules that share a common template and you'd "
"like to align them to that template, you can do so as follows:"
msgstr ""

#: ../../GettingStartedInPython.rst:499
msgid ""
"Running this process for a couple of other molecules gives the following "
"depictions:"
msgstr ""

#: ../../GettingStartedInPython.rst:503
msgid "|picture_1|"
msgstr ""

#: ../../GettingStartedInPython.rst:503
msgid "|picture_0|"
msgstr ""

#: ../../GettingStartedInPython.rst:503
msgid "|picture_3|"
msgstr ""

#: ../../GettingStartedInPython.rst:506
msgid ""
"Another option for Compute2DCoords allows you to generate 2D depictions "
"for molecules that closely mimic 3D conformations. This is available "
"using the function "
":api:`rdkit.Chem.AllChem.GenerateDepictionMatching3DStructure`."
msgstr ""

#: ../../GettingStartedInPython.rst:509
msgid ""
"Here is an illustration of the results using the ligand from PDB "
"structure 1XP0:"
msgstr ""

#: ../../GettingStartedInPython.rst:512
msgid "|picture_2|"
msgstr ""

#: ../../GettingStartedInPython.rst:512
msgid "|picture_4|"
msgstr ""

#: ../../GettingStartedInPython.rst:515
msgid ""
"More fine-grained control can be obtained using the core function "
":api:`rdkit.Chem.rdDepictor.Compute2DCoordsMimicDistmat`, but that is "
"beyond the scope of this document.  See the implementation of "
"GenerateDepictionMatching3DStructure in AllChem.py for an example of how "
"it is used."
msgstr ""

#: ../../GettingStartedInPython.rst:523
msgid "Working with 3D Molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:525
msgid ""
"The RDKit can generate conformations for molecules using two different "
"methods.  The original method used distance geometry. [#blaney]_ The "
"algorithm followed is:"
msgstr ""

#: ../../GettingStartedInPython.rst:529
msgid ""
"The molecule's distance bounds matrix is calculated based on the "
"connection table and a set of rules."
msgstr ""

#: ../../GettingStartedInPython.rst:531
msgid "The bounds matrix is smoothed using a triangle-bounds smoothing algorithm."
msgstr ""

#: ../../GettingStartedInPython.rst:533
msgid "A random distance matrix that satisfies the bounds matrix is generated."
msgstr ""

#: ../../GettingStartedInPython.rst:535
msgid ""
"This distance matrix is embedded in 3D dimensions (producing coordinates "
"for each atom)."
msgstr ""

#: ../../GettingStartedInPython.rst:537
msgid ""
"The resulting coordinates are cleaned up somewhat using a crude force "
"field and the bounds matrix."
msgstr ""

#: ../../GettingStartedInPython.rst:539
msgid ""
"Note that the conformations that result from this procedure tend to be "
"fairly ugly. They should be cleaned up using a force field. This can be "
"done within the RDKit using its implementation of the Universal Force "
"Field (UFF). [#rappe]_"
msgstr ""

#: ../../GettingStartedInPython.rst:543
msgid ""
"More recently, there is an implementation of the method of Riniker and "
"Landrum [#riniker2]_ which uses torsion angle preferences from the "
"Cambridge Structural Database (CSD) to correct the conformers after "
"distance geometry has been used to generate them.  With this method, "
"there should be no need to use a minimisation step to clean up the "
"structures."
msgstr ""

#: ../../GettingStartedInPython.rst:550
msgid ""
"The full process of embedding and optimizing a molecule is easier than "
"all the above verbiage makes it sound:"
msgstr ""

#: ../../GettingStartedInPython.rst:564
msgid ""
"The RDKit also has an implementation of the MMFF94 force field available."
" [#mmff1]_, [#mmff2]_, [#mmff3]_, [#mmff4]_, [#mmffs]_ Please note that "
"the MMFF atom typing code uses its own aromaticity model, so the "
"aromaticity flags of the molecule will be modified after calling MMFF-"
"related methods."
msgstr ""

#: ../../GettingStartedInPython.rst:576
msgid ""
"Note the calls to `Chem.AddHs()` in the examples above. By default RDKit "
"molecules do not have H atoms explicitly present in the graph, but they "
"are important for getting realistic geometries, so they generally should "
"be added.  They can always be removed afterwards if necessary with a call"
" to `Chem.RemoveHs()`."
msgstr ""

#: ../../GettingStartedInPython.rst:582
msgid ""
"With the RDKit, multiple conformers can also be generated using the two "
"different embedding methods. In both cases this is simply a matter of "
"running the distance geometry calculation multiple times from different "
"random start points. The option numConfs allows the user to set the "
"number of conformers that should be generated.  Otherwise the procedures "
"are as before. The conformers so generated can be aligned to each other "
"and the RMS values calculated."
msgstr ""

#: ../../GettingStartedInPython.rst:603
msgid ""
"rmslist contains the RMS values between the first conformer and all "
"others. The RMS between two specific conformers (e.g. 1 and 9) can also "
"be calculated. The flag prealigned lets the user specify if the "
"conformers are already aligned (by default, the function aligns them)."
msgstr ""

#: ../../GettingStartedInPython.rst:610
msgid "We can also generate multiple conformers using the new CSD-based method:"
msgstr ""

#: ../../GettingStartedInPython.rst:619
msgid "More 3D functionality of the RDKit is described in the Cookbook."
msgstr ""

#: ../../GettingStartedInPython.rst:622
msgid ""
"*Disclaimer/Warning*: Conformation generation is a difficult and subtle "
"task. The original, default, 2D->3D conversion provided with the RDKit is"
" not intended to be a replacement for a “real” conformational analysis "
"tool; it merely provides quick 3D structures for cases when they are "
"required. We believe, however, that the newer ETKDG method[#riniker2]_ "
"should be adequate for most purposes."
msgstr ""

#: ../../GettingStartedInPython.rst:631
msgid "Preserving Molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:633
msgid ""
"Molecules can be converted to and from text using Python's pickling "
"machinery:"
msgstr ""

#: ../../GettingStartedInPython.rst:642
msgid ""
"The RDKit pickle format is fairly compact and it is much, much faster to "
"build a molecule from a pickle than from a Mol file or SMILES string, so "
"storing molecules you will be working with repeatedly as pickles can be a"
" good idea."
msgstr ""

#: ../../GettingStartedInPython.rst:644
msgid ""
"The raw binary data that is encapsulated in a pickle can also be directly"
" obtained from a molecule:"
msgstr ""

#: ../../GettingStartedInPython.rst:648
msgid "This can be used to reconstruct molecules using the Chem.Mol constructor:"
msgstr ""

#: ../../GettingStartedInPython.rst:656
msgid "Note that this is smaller than the pickle:"
msgstr ""

#: ../../GettingStartedInPython.rst:661
msgid ""
"The small overhead associated with python's pickling machinery normally "
"doesn't end up making much of a difference for collections of larger "
"molecules (the extra data associated with the pickle is independent of "
"the size of the molecule, while the binary string increases in length as "
"the molecule gets larger)."
msgstr ""

#: ../../GettingStartedInPython.rst:663
msgid ""
"*Tip*: The performance difference associated with storing molecules in a "
"pickled form on disk instead of constantly reparsing an SD file or SMILES"
" table is difficult to overstate. In a test I just ran on my laptop, "
"loading a set of 699 drug-like molecules from an SD file took 10.8 "
"seconds; loading the same molecules from a pickle file took 0.7 seconds. "
"The pickle file is also smaller – 1/3 the size of the SD file – but this "
"difference is not always so dramatic (it's a particularly fat SD file)."
msgstr ""

#: ../../GettingStartedInPython.rst:668
msgid "Drawing Molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:670
msgid ""
"The RDKit has some built-in functionality for creating images from "
"molecules found in the :api:`rdkit.Chem.Draw` package:"
msgstr ""

#: ../../GettingStartedInPython.rst:680
msgid "Producing these images:"
msgstr ""

#: ../../GettingStartedInPython.rst:686
msgid "It's also possible to produce an image grid out of a set of molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:690
msgid "This returns a PIL image, which can then be saved to a file:"
msgstr ""

#: ../../GettingStartedInPython.rst:694 ../../GettingStartedInPython.rst:712
msgid "The result looks like this:"
msgstr ""

#: ../../GettingStartedInPython.rst:698
msgid ""
"These would of course look better if the common core were aligned. This "
"is easy enough to do:"
msgstr ""

#: ../../GettingStartedInPython.rst:720
msgid "Substructure Searching"
msgstr ""

#: ../../GettingStartedInPython.rst:722
msgid "Substructure matching can be done using query molecules built from SMARTS:"
msgstr ""

#: ../../GettingStartedInPython.rst:731
msgid ""
"Those are the atom indices in ``m``, ordered as ``patt``'s atoms. To get "
"all of the matches:"
msgstr ""

#: ../../GettingStartedInPython.rst:736
msgid "This can be used to easily filter lists of molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:748
msgid ""
"We can write the same thing more compactly using Python's list "
"comprehension syntax:"
msgstr ""

#: ../../GettingStartedInPython.rst:754
msgid ""
"Substructure matching can also be done using molecules built from SMILES "
"instead of SMARTS:"
msgstr ""

#: ../../GettingStartedInPython.rst:762
msgid ""
"But don't forget that the semantics of the two languages are not exactly "
"equivalent:"
msgstr ""

#: ../../GettingStartedInPython.rst:773
msgid "Stereochemistry in substructure matches"
msgstr ""

#: ../../GettingStartedInPython.rst:775
msgid ""
"By default information about stereochemistry is not used in substructure "
"searches:"
msgstr ""

#: ../../GettingStartedInPython.rst:786
msgid "But this can be changed via the `useChirality` argument:"
msgstr ""

#: ../../GettingStartedInPython.rst:795
msgid ""
"Notice that when `useChirality` is set a non-chiral query **does** match "
"a chiral molecule. The same is not true for a chiral query and a non-"
"chiral molecule:"
msgstr ""

#: ../../GettingStartedInPython.rst:805
msgid "Atom Map Indices in SMARTS"
msgstr ""

#: ../../GettingStartedInPython.rst:807
msgid ""
"It is possible to attach indices to the atoms in the SMARTS pattern. This"
" is most often done in reaction SMARTS (see `Chemical Reactions`_), but "
"is more general than that.  For example, in the SMARTS patterns for "
"torsion angle analysis published by Guba `et al.` (``DOI: "
"acs.jcim.5b00522``) indices are used to define the four atoms of the "
"torsion of interest. This allows additional atoms to be used to define "
"the environment of the four torsion atoms, as in "
"``[cH0:1][c:2]([cH0])!@[CX3!r:3]=[NX2!r:4]`` for an aromatic C=N torsion."
"  We might wonder in passing why they didn't use recursive SMARTS for "
"this, which would have made life easier, but it is what it is. The atom "
"lists from ``GetSubstructureMatches`` are guaranteed to be in order of "
"the SMARTS, but in this case we'll get five atoms so we need a way of "
"picking out, in the correct order, the four of interest.  When the SMARTS"
" is parsed, the relevant atoms are assigned an atom map number property "
"that we can easily extract:"
msgstr ""

#: ../../GettingStartedInPython.rst:835
msgid ""
"Then, when using the query on a molecule you can get the indices of the "
"four matching atoms like this:"
msgstr ""

#: ../../GettingStartedInPython.rst:845
msgid "Chemical Transformations"
msgstr ""

#: ../../GettingStartedInPython.rst:847
msgid ""
"The RDKit contains a number of functions for modifying molecules. Note "
"that these transformation functions are intended to provide an easy way "
"to make simple modifications to molecules. For more complex "
"transformations, use the `Chemical Reactions`_ functionality."
msgstr ""

#: ../../GettingStartedInPython.rst:853
msgid "Substructure-based transformations"
msgstr ""

#: ../../GettingStartedInPython.rst:855
msgid ""
"There's a variety of functionality for using the RDKit's substructure-"
"matching machinery for doing quick molecular transformations. These "
"transformations include deleting substructures:"
msgstr ""

#: ../../GettingStartedInPython.rst:865
msgid "replacing substructures:"
msgstr ""

#: ../../GettingStartedInPython.rst:876
msgid "as well as simple SAR-table transformations like removing side chains:"
msgstr ""

#: ../../GettingStartedInPython.rst:884
msgid "and removing cores:"
msgstr ""

#: ../../GettingStartedInPython.rst:890
msgid ""
"To get more detail about the sidechains (e.g. sidechain labels), use "
"isomeric smiles:"
msgstr ""

#: ../../GettingStartedInPython.rst:895
msgid ""
"By default the sidechains are labeled based on the order they are found. "
"They can also be labeled according by the number of that core-atom "
"they're attached to:"
msgstr ""

#: ../../GettingStartedInPython.rst:903
msgid ""
":api:`rdkit.Chem.rdmolops.ReplaceCore` returns the sidechains in a single"
" molecule. This can be split into separate molecules using "
":api:`rdkit.Chem.rdmolops.GetMolFrags` :"
msgstr ""

#: ../../GettingStartedInPython.rst:916
msgid "Murcko Decomposition"
msgstr ""

#: ../../GettingStartedInPython.rst:918
msgid ""
"The RDKit provides standard Murcko-type decomposition [#bemis1]_ of "
"molecules into scaffolds:"
msgstr ""

#: ../../GettingStartedInPython.rst:928
msgid "or into a generic framework:"
msgstr ""

#: ../../GettingStartedInPython.rst:936
msgid "Maximum Common Substructure"
msgstr ""

#: ../../GettingStartedInPython.rst:938
msgid ""
"The FindMCS function find a maximum common substructure (MCS) of two or "
"more molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:958
msgid ""
"It returns an MCSResult instance with information about the number of "
"atoms and bonds in the MCS, the SMARTS string which matches the "
"identified MCS, and a flag saying if the algorithm timed out. If no MCS "
"is found then the number of atoms and bonds is set to 0 and the SMARTS to"
" ``''``."
msgstr ""

#: ../../GettingStartedInPython.rst:964
msgid ""
"By default, two atoms match if they are the same element and two bonds "
"match if they have the same bond type. Specify ``atomCompare`` and "
"``bondCompare`` to use different comparison functions, as in:"
msgstr ""

#: ../../GettingStartedInPython.rst:976
msgid ""
"The options for the atomCompare argument are: CompareAny says that any "
"atom matches any other atom, CompareElements compares by element type, "
"and CompareIsotopes matches based on the isotope label. Isotope labels "
"can be used to implement user-defined atom types. A bondCompare of "
"CompareAny says that any bond matches any other bond, CompareOrderExact "
"says bonds are equivalent if and only if they have the same bond type, "
"and CompareOrder allows single and aromatic bonds to match each other, "
"but requires an exact order match otherwise:"
msgstr ""

#: ../../GettingStartedInPython.rst:994
msgid ""
"A substructure has both atoms and bonds. By default, the algorithm "
"attempts to maximize the number of bonds found. You can change this by "
"setting the ``maximizeBonds`` argument to False. Maximizing the number of"
" bonds tends to maximize the number of rings, although two small rings "
"may have fewer bonds than one large ring."
msgstr ""

#: ../../GettingStartedInPython.rst:1000
msgid ""
"You might not want a 3-valent nitrogen to match one which is 5-valent. "
"The default ``matchValences`` value of False ignores valence information."
"  When True, the atomCompare setting is modified to also require that the"
" two atoms have the same valency."
msgstr ""

#: ../../GettingStartedInPython.rst:1011
msgid ""
"It can be strange to see a linear carbon chain match a carbon ring, which"
" is what the ``ringMatchesRingOnly`` default of False does. If you set it"
" to True then ring bonds will only match ring bonds."
msgstr ""

#: ../../GettingStartedInPython.rst:1021
msgid ""
"You can further restrict things and require that partial rings (as in "
"this case) are not allowed. That is, if an atom is part of the MCS and "
"the atom is in a ring of the entire molecule then that atom is also in a "
"ring of the MCS. Set ``completeRingsOnly`` to True to toggle this "
"requirement and also sets ringMatchesRingOnly to True."
msgstr ""

#: ../../GettingStartedInPython.rst:1035
msgid ""
"The MCS algorithm will exhaustively search for a maximum common "
"substructure. Typically this takes a fraction of a second, but for some "
"comparisons this can take minutes or longer. Use the ``timeout`` "
"parameter to stop the search after the given number of seconds (wall-"
"clock seconds, not CPU seconds) and return the best match found in that "
"time. If timeout is reached then the ``canceled`` property of the "
"MCSResult will be True instead of False."
msgstr ""

#: ../../GettingStartedInPython.rst:1046
msgid "(The MCS after 50 seconds contained 511 atoms.)"
msgstr ""

#: ../../GettingStartedInPython.rst:1051
msgid "Fingerprinting and Molecular Similarity"
msgstr ""

#: ../../GettingStartedInPython.rst:1053
msgid ""
"The RDKit has a variety of built-in functionality for generating "
"molecular fingerprints and using them to calculate molecular similarity."
msgstr ""

#: ../../GettingStartedInPython.rst:1057
msgid "Topological Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:1071
msgid ""
"The fingerprinting algorithm used is similar to that used in the Daylight"
" fingerprinter: it identifies and hashes topological paths (e.g. along "
"bonds) in the molecule and then uses them to set bits in a fingerprint of"
" user-specified lengths. After all paths have been identified, the "
"fingerprint is typically folded down until a particular density of set "
"bits is obtained."
msgstr ""

#: ../../GettingStartedInPython.rst:1076
msgid ""
"The default set of parameters used by the fingerprinter is: - minimum "
"path size: 1 bond - maximum path size: 7 bonds - fingerprint size: 2048 "
"bits - number of bits set per hash: 2 - minimum fingerprint size: 64 bits"
" - target on-bit density 0.3"
msgstr ""

#: ../../GettingStartedInPython.rst:1084
msgid ""
"You can control these by calling "
":api:`rdkit.Chem.rdmolops.RDKFingerprint` directly; this will return an "
"unfolded fingerprint that you can then fold to the desired density. The "
"function :api:`rdkit.Chem.Fingerprints.FingerprintMols.FingerprintMol` "
"(written in python) shows how this is done."
msgstr ""

#: ../../GettingStartedInPython.rst:1091
msgid ""
"The default similarity metric used by "
":api:`rdkit.DataStructs.FingerprintSimilarity` is the Tanimoto "
"similarity.  One can use different similarity metrics:"
msgstr ""

#: ../../GettingStartedInPython.rst:1098
msgid ""
"Available similarity metrics include Tanimoto, Dice, Cosine, Sokal, "
"Russel, Kulczynski, McConnaughey, and Tversky."
msgstr ""

#: ../../GettingStartedInPython.rst:1102
msgid "MACCS Keys"
msgstr ""

#: ../../GettingStartedInPython.rst:1104
msgid "There is a SMARTS-based implementation of the 166 public MACCS keys."
msgstr ""

#: ../../GettingStartedInPython.rst:1115
msgid ""
"The MACCS keys were critically evaluated and compared to other MACCS "
"implementations in Q3 2008. In cases where the public keys are fully "
"defined, things looked pretty good."
msgstr ""

#: ../../GettingStartedInPython.rst:1119
msgid "Atom Pairs and Topological Torsions"
msgstr ""

#: ../../GettingStartedInPython.rst:1121
msgid ""
"Atom-pair descriptors [#carhart]_ are available in several different "
"forms. The standard form is as fingerprint including counts for each bit "
"instead of just zeros and ones:"
msgstr ""

#: ../../GettingStartedInPython.rst:1128
msgid ""
"Because the space of bits that can be included in atom-pair fingerprints "
"is huge, they are stored in a sparse manner. We can get the list of bits "
"and their counts for each fingerprint as a dictionary:"
msgstr ""

#: ../../GettingStartedInPython.rst:1137
msgid "Descriptions of the bits are also available:"
msgstr ""

#: ../../GettingStartedInPython.rst:1142
msgid ""
"The above means: C with 1 neighbor and 0 pi electrons which is 3 bonds "
"from a C with 2 neighbors and 0 pi electrons"
msgstr ""

#: ../../GettingStartedInPython.rst:1145
msgid ""
"The usual metric for similarity between atom-pair fingerprints is Dice "
"similarity:"
msgstr ""

#: ../../GettingStartedInPython.rst:1155
msgid ""
"It's also possible to get atom-pair descriptors encoded as a standard bit"
" vector fingerprint (ignoring the count information):"
msgstr ""

#: ../../GettingStartedInPython.rst:1160
msgid ""
"Since these are standard bit vectors, the :api:`rdkit.DataStructs` module"
" can be used for similarity:"
msgstr ""

#: ../../GettingStartedInPython.rst:1171
msgid ""
"Topological torsion descriptors [#nilakantan]_ are calculated in "
"essentially the same way:"
msgstr ""

#: ../../GettingStartedInPython.rst:1179
msgid ""
"At the time of this writing, topological torsion fingerprints have too "
"many bits to be encodeable using the BitVector machinery, so there is no "
"GetTopologicalTorsionFingerprintAsBitVect function."
msgstr ""

#: ../../GettingStartedInPython.rst:1183
msgid "Morgan Fingerprints (Circular Fingerprints)"
msgstr ""

#: ../../GettingStartedInPython.rst:1185
msgid ""
"This family of fingerprints, better known as circular fingerprints "
"[#rogers]_, is built by applying the Morgan algorithm to a set of user-"
"supplied atom invariants.  When generating Morgan fingerprints, the "
"radius of the fingerprint must also be provided :"
msgstr ""

#: ../../GettingStartedInPython.rst:1200
msgid ""
"Morgan fingerprints, like atom pairs and topological torsions, use counts"
" by default, but it's also possible to calculate them as bit vectors:"
msgstr ""

#: ../../GettingStartedInPython.rst:1211
msgid ""
"The default atom invariants use connectivity information similar to those"
" used for the well known ECFP family of fingerprints. Feature-based "
"invariants, similar to those used for the FCFP fingerprints, can also be "
"used. The feature definitions used are defined in the section `Feature "
"Definitions Used in the Morgan Fingerprints`_.  At times this can lead to"
" quite different similarity scores:"
msgstr ""

#: ../../GettingStartedInPython.rst:1230
msgid ""
"When comparing the ECFP/FCFP fingerprints and the Morgan fingerprints "
"generated by the RDKit, remember that the 4 in ECFP4 corresponds to the "
"diameter of the atom environments considered, while the Morgan "
"fingerprints take a radius parameter.  So the examples above, with "
"radius=2, are roughly equivalent to ECFP4 and FCFP4."
msgstr ""

#: ../../GettingStartedInPython.rst:1236
msgid ""
"The user can also provide their own atom invariants using the optional "
"invariants argument to "
":api:`rdkit.Chem.rdMolDescriptors.GetMorganFingerprint`.  Here's a simple"
" example that uses a constant for the invariant; the resulting "
"fingerprints compare the topology of molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:1249
msgid "Note that bond order is by default still considered:"
msgstr ""

#: ../../GettingStartedInPython.rst:1256
msgid "But this can also be turned off:"
msgstr ""

#: ../../GettingStartedInPython.rst:1267
msgid "Explaining bits from Morgan Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:1269
msgid ""
"Information is available about the atoms that contribute to particular "
"bits in the Morgan fingerprint via the bitInfo argument.  The dictionary "
"provided is populated with one entry per bit set in the fingerprint, the "
"keys are the bit ids, the values are lists of (atom index, radius) "
"tuples."
msgstr ""

#: ../../GettingStartedInPython.rst:1288
msgid ""
"Interpreting the above: bit 98513984 is set twice: once by atom 1 and "
"once by atom 2, each at radius 1. Bit 4048591891 is set once by atom 5 at"
" radius 2."
msgstr ""

#: ../../GettingStartedInPython.rst:1292
msgid ""
"Focusing on bit 4048591891, we can extract the submolecule consisting of "
"all atoms within a radius of 2 of atom 5:"
msgstr ""

#: ../../GettingStartedInPython.rst:1303
msgid "And then “explain” the bit by generating SMILES for that submolecule:"
msgstr ""

#: ../../GettingStartedInPython.rst:1308
msgid "This is more useful when the SMILES is rooted at the central atom:"
msgstr ""

#: ../../GettingStartedInPython.rst:1313
msgid ""
"An alternate (and faster, particularly for large numbers of molecules) "
"approach to do the same thing, using the function "
":api:`rdkit.Chem.MolFragmentToSmiles` :"
msgstr ""

#: ../../GettingStartedInPython.rst:1326
msgid "Picking Diverse Molecules Using Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:1328
msgid ""
"A common task is to pick a small subset of diverse molecules from a "
"larger set.  The RDKit provides a number of approaches for doing this in "
"the :api:`rdkit.SimDivFilters` module.  The most efficient of these uses "
"the MaxMin algorithm. [#ashton]_ Here's an example:"
msgstr ""

#: ../../GettingStartedInPython.rst:1333
msgid "Start by reading in a set of molecules and generating Morgan fingerprints:"
msgstr ""

#: ../../GettingStartedInPython.rst:1344
msgid ""
"The algorithm requires a function to calculate distances between objects,"
" we'll do that using DiceSimilarity:"
msgstr ""

#: ../../GettingStartedInPython.rst:1350
msgid "Now create a picker and grab a set of 10 diverse molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:1357
msgid ""
"Note that the picker just returns indices of the fingerprints; we can get"
" the molecules themselves as follows:"
msgstr ""

#: ../../GettingStartedInPython.rst:1364
msgid "Generating Similarity Maps Using Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:1366
msgid ""
"Similarity maps are a way to visualize the atomic contributions to the "
"similarity between a molecule and a reference molecule. The methodology "
"is described in Ref. [#riniker]_ . They are in the "
":api:`rdkit.Chem.Draw.SimilarityMaps` module :"
msgstr ""

#: ../../GettingStartedInPython.rst:1371
msgid "Start by creating two molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:1377
msgid ""
"The SimilarityMaps module supports three kind of fingerprints: atom "
"pairs, topological torsions and Morgan fingerprints."
msgstr ""

#: ../../GettingStartedInPython.rst:1386
msgid ""
"The types of atom pairs and torsions are normal (default), hashed and bit"
" vector (bv). The types of the Morgan fingerprint are bit vector (bv, "
"default) and count vector (count)."
msgstr ""

#: ../../GettingStartedInPython.rst:1389
msgid ""
"The function generating a similarity map for two fingerprints requires "
"the specification of the fingerprint function and optionally the "
"similarity metric. The default for the latter is the Dice similarity. "
"Using all the default arguments of the Morgan fingerprint function, the "
"similarity map can be generated like this:"
msgstr ""

#: ../../GettingStartedInPython.rst:1396 ../../GettingStartedInPython.rst:1406
#: ../../GettingStartedInPython.rst:1424 ../../GettingStartedInPython.rst:1467
#: ../../GettingStartedInPython.rst:1477
msgid "Producing this image:"
msgstr ""

#: ../../GettingStartedInPython.rst:1400
msgid ""
"For a different type of Morgan (e.g. count) and radius = 1 instead of 2, "
"as well as a different similarity metric (e.g. Tanimoto), the call "
"becomes:"
msgstr ""

#: ../../GettingStartedInPython.rst:1410
msgid ""
"The convenience function GetSimilarityMapForFingerprint involves the "
"normalisation of the atomic weights such that the maximum absolute weight"
" is 1. Therefore, the function outputs the maximum weight that was found "
"when creating the map."
msgstr ""

#: ../../GettingStartedInPython.rst:1417
msgid "If one does not want the normalisation step, the map can be created like:"
msgstr ""

#: ../../GettingStartedInPython.rst:1430
msgid "Descriptor Calculation"
msgstr ""

#: ../../GettingStartedInPython.rst:1432
msgid ""
"A variety of descriptors are available within the RDKit. The complete "
"list is provided in `List of Available Descriptors`_."
msgstr ""

#: ../../GettingStartedInPython.rst:1435
msgid ""
"Most of the descriptors are straightforward to use from Python via the "
"centralized :api:`rdkit.Chem.Descriptors` module :"
msgstr ""

#: ../../GettingStartedInPython.rst:1445
msgid "Partial charges are handled a bit differently:"
msgstr ""

#: ../../GettingStartedInPython.rst:1454
msgid "Visualization of Descriptors"
msgstr ""

#: ../../GettingStartedInPython.rst:1456
msgid ""
"Similarity maps can be used to visualize descriptors that can be divided "
"into atomic contributions."
msgstr ""

#: ../../GettingStartedInPython.rst:1459
msgid ""
"The Gasteiger partial charges can be visualized as (using a different "
"color scheme):"
msgstr ""

#: ../../GettingStartedInPython.rst:1471
msgid "Or for the Crippen contributions to logP:"
msgstr ""

#: ../../GettingStartedInPython.rst:1482
msgid "Chemical Reactions"
msgstr ""

#: ../../GettingStartedInPython.rst:1484
msgid ""
"The RDKit also supports applying chemical reactions to sets of molecules."
"  One way of constructing chemical reactions is to use a SMARTS-based "
"language similar to Daylight's Reaction SMILES [#rxnsmarts]_:"
msgstr ""

#: ../../GettingStartedInPython.rst:1509
msgid "Reactions can also be built from MDL rxn files:"
msgstr ""

#: ../../GettingStartedInPython.rst:1522
msgid ""
"It is, of course, possible to do reactions more complex than amide bond "
"formation:"
msgstr ""

#: ../../GettingStartedInPython.rst:1530
msgid ""
"Note in this case that there are multiple mappings of the reactants onto "
"the templates, so we have multiple product sets:"
msgstr ""

#: ../../GettingStartedInPython.rst:1536
msgid ""
"You can use canonical smiles and a python dictionary to get the unique "
"products:"
msgstr ""

#: ../../GettingStartedInPython.rst:1546
msgid ""
"Note that the molecules that are produced by the chemical reaction "
"processing code are not sanitized, as this artificial reaction "
"demonstrates:"
msgstr ""

#: ../../GettingStartedInPython.rst:1561
msgid "Advanced Reaction Functionality"
msgstr ""

#: ../../GettingStartedInPython.rst:1564
msgid "Protecting Atoms"
msgstr ""

#: ../../GettingStartedInPython.rst:1566
msgid ""
"Sometimes, particularly when working with rxn files, it is difficult to "
"express a reaction exactly enough to not end up with extraneous products."
" The RDKit provides a method of \"protecting\" atoms to disallow them "
"from taking part in reactions."
msgstr ""

#: ../../GettingStartedInPython.rst:1571
msgid ""
"This can be demonstrated re-using the amide-bond formation reaction used "
"above. The query for amines isn't specific enough, so it matches any "
"nitrogen that has at least one H attached. So if we apply the reaction to"
" a molecule that already has an amide bond, the amide N is also treated "
"as a reaction site:"
msgstr ""

#: ../../GettingStartedInPython.rst:1588
msgid "The first product corresponds to the reaction at the amide N."
msgstr ""

#: ../../GettingStartedInPython.rst:1590
msgid ""
"We can prevent this from happening by protecting all amide Ns. Here we do"
" it with a substructure query that matches amides and thioamides and then"
" set the \"_protected\" property on matching atoms:"
msgstr ""

#: ../../GettingStartedInPython.rst:1599
msgid "Now the reaction only generates a single product:"
msgstr ""

#: ../../GettingStartedInPython.rst:1609
msgid "Recap Implementation"
msgstr ""

#: ../../GettingStartedInPython.rst:1611
msgid ""
"Associated with the chemical reaction functionality is an implementation "
"of the Recap algorithm. [#lewell]_ Recap uses a set of chemical "
"transformations mimicking common reactions carried out in the lab in "
"order to decompose a molecule into a series of reasonable fragments."
msgstr ""

#: ../../GettingStartedInPython.rst:1617
msgid ""
"The RDKit :api:`rdkit.Chem.Recap` implementation keeps track of the "
"hierarchy of transformations that were applied:"
msgstr ""

#: ../../GettingStartedInPython.rst:1627
msgid "The hierarchy is rooted at the original molecule:"
msgstr ""

#: ../../GettingStartedInPython.rst:1632
msgid "and each node tracks its children using a dictionary keyed by SMILES:"
msgstr ""

#: ../../GettingStartedInPython.rst:1638
msgid ""
"The nodes at the bottom of the hierarchy (the leaf nodes) are easily "
"accessible, also as a dictionary keyed by SMILES:"
msgstr ""

#: ../../GettingStartedInPython.rst:1646
msgid ""
"Notice that dummy atoms are used to mark points where the molecule was "
"fragmented."
msgstr ""

#: ../../GettingStartedInPython.rst:1648
msgid "The nodes themselves have associated molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:1656
msgid "BRICS Implementation"
msgstr ""

#: ../../GettingStartedInPython.rst:1658
msgid ""
"The RDKit also provides an implementation of the BRICS algorithm. "
"[#degen]_ BRICS provides another method for fragmenting molecules along "
"synthetically accessible bonds:"
msgstr ""

#: ../../GettingStartedInPython.rst:1671
msgid ""
"Notice that RDKit BRICS implementation returns the unique fragments "
"generated from a molecule and that the dummy atoms are tagged to indicate"
" which type of reaction applies."
msgstr ""

#: ../../GettingStartedInPython.rst:1675
msgid ""
"It's quite easy to generate the list of all fragments for a group of "
"molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:1688
msgid ""
"The BRICS module also provides an option to apply the BRICS rules to a "
"set of fragments to create new molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:1696
msgid "The result is a generator object:"
msgstr ""

#: ../../GettingStartedInPython.rst:1701
msgid "That returns molecules on request:"
msgstr ""

#: ../../GettingStartedInPython.rst:1707
msgid ""
"The molecules have not been sanitized, so it's a good idea to at least "
"update the valences before continuing:"
msgstr ""

#: ../../GettingStartedInPython.rst:1720
msgid "Other fragmentation approaches"
msgstr ""

#: ../../GettingStartedInPython.rst:1722
msgid ""
"In addition to the methods described above, the RDKit provide a very "
"flexible generic function for fragmenting molecules along user-specified "
"bonds."
msgstr ""

#: ../../GettingStartedInPython.rst:1726
msgid ""
"Here's a quick demonstration of using that to break all bonds between "
"atoms in rings and atoms not in rings. We start by finding all the atom "
"pairs:"
msgstr ""

#: ../../GettingStartedInPython.rst:1735
msgid "then we get the corresponding bond indices:"
msgstr ""

#: ../../GettingStartedInPython.rst:1741
msgid "then we use those bond indices as input to the fragmentation function:"
msgstr ""

#: ../../GettingStartedInPython.rst:1745
msgid ""
"the output is a molecule that has dummy atoms marking the places where "
"bonds were broken:"
msgstr ""

#: ../../GettingStartedInPython.rst:1751
msgid ""
"By default the attachment points are labelled (using isotopes) with the "
"index of the atom that was removed. We can also provide our own set of "
"atom labels in the form of pairs of unsigned integers. The first value in"
" each pair is used as the label for the dummy that replaces the bond's "
"begin atom, the second value in each pair is for the dummy that replaces "
"the bond's end atom. Here's an example, repeating the analysis above and "
"marking the positions where the non-ring atoms were with the label 10 and"
" marking the positions where the ring atoms were with label 1:"
msgstr ""

#: ../../GettingStartedInPython.rst:1777
msgid "Chemical Features and Pharmacophores"
msgstr ""

#: ../../GettingStartedInPython.rst:1781
msgid "Chemical Features"
msgstr ""

#: ../../GettingStartedInPython.rst:1783
msgid ""
"Chemical features in the RDKit are defined using a SMARTS-based feature "
"definition language (described in detail in the RDKit book). To identify "
"chemical features in molecules, you first must build a feature factory:"
msgstr ""

#: ../../GettingStartedInPython.rst:1793
msgid "and then use the factory to search for features:"
msgstr ""

#: ../../GettingStartedInPython.rst:1800
msgid ""
"The individual features carry information about their family (e.g. donor,"
" acceptor, etc.), type (a more detailed description), and the atom(s) "
"that is/are associated with the feature:"
msgstr ""

#: ../../GettingStartedInPython.rst:1813
msgid ""
"If the molecule has coordinates, then the features will also have "
"reasonable locations:"
msgstr ""

#: ../../GettingStartedInPython.rst:1825
msgid "2D Pharmacophore Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:1827
msgid ""
"Combining a set of chemical features with the 2D (topological) distances "
"between them gives a 2D pharmacophore.  When the distances are binned, "
"unique integer ids can be assigned to each of these pharmacophores and "
"they can be stored in a fingerprint.  Details of the encoding are in the "
":doc:`RDKit_Book`."
msgstr ""

#: ../../GettingStartedInPython.rst:1833
msgid ""
"Generating pharmacophore fingerprints requires chemical features "
"generated via the usual RDKit feature-typing mechanism:"
msgstr ""

#: ../../GettingStartedInPython.rst:1841
msgid ""
"The fingerprints themselves are calculated using a signature "
"(fingerprint) factory, which keeps track of all the parameters required "
"to generate the pharmacophore:"
msgstr ""

#: ../../GettingStartedInPython.rst:1852
msgid ""
"The signature factory is now ready to be used to generate fingerprints, a"
" task which is done using the :api:`rdkit.Chem.Pharm2D.Generate` module:"
msgstr ""

#: ../../GettingStartedInPython.rst:1866
msgid ""
"Details about the bits themselves, including the features that are "
"involved and the binned distance matrix between the features, can be "
"obtained from the signature factory:"
msgstr ""

#: ../../GettingStartedInPython.rst:1885
msgid ""
"For the sake of convenience (to save you from having to edit the fdef "
"file every time) it is possible to disable particular feature types "
"within the SigFactory:"
msgstr ""

#: ../../GettingStartedInPython.rst:1897
msgid ""
"Another possible set of feature definitions for 2D pharmacophore "
"fingerprints in the RDKit are those published by Gobbi and Poppinger. "
"[#gobbi]_ The module :api:`rdkit.Chem.Pharm2D.Gobbi_Pharm2D` has a pre-"
"configured signature factory for these fingerprint types.  Here's an "
"example of using it:"
msgstr ""

#: ../../GettingStartedInPython.rst:1920
msgid "Molecular Fragments"
msgstr ""

#: ../../GettingStartedInPython.rst:1922
msgid ""
"The RDKit contains a collection of tools for fragmenting molecules and "
"working with those fragments.  Fragments are defined to be made up of a "
"set of connected atoms that may have associated functional groups. This "
"is more easily demonstrated than explained:"
msgstr ""

#: ../../GettingStartedInPython.rst:1944
msgid ""
"The fragments are stored as entries in a "
":api:`rdkit.Chem.rdfragcatalog.FragCatalog`.  Notice that the entry "
"descriptions include pieces in angular brackets (e.g. between '<' and "
"'>').  These describe the functional groups attached to the fragment.  "
"For example, in the above example, the catalog entry 0 corresponds to an "
"ethyl fragment with an alcohol attached to one of the carbons and entry 1"
" is an ethylene with a carboxylic acid on one carbon.  Detailed "
"information about the functional groups can be obtained by asking the "
"fragment for the ids of the functional groups it contains and then "
"looking those ids up in the :api:`rdkit.Chem.rdfragcatalog.FragCatParams`"
" object:"
msgstr ""

#: ../../GettingStartedInPython.rst:1970
msgid ""
"The catalog is hierarchical: smaller fragments are combined to form "
"larger ones.  From a small fragment, one can find the larger fragments to"
" which it contributes using the "
":api:`rdkit.Chem.rdfragcatalog.FragCatalog.GetEntryDownIds` method:"
msgstr ""

#: ../../GettingStartedInPython.rst:1991
msgid "The fragments from multiple molecules can be added to a catalog:"
msgstr ""

#: ../../GettingStartedInPython.rst:2004
msgid ""
"The fragments in a catalog are unique, so adding a molecule a second time"
" doesn't add any new entries:"
msgstr ""

#: ../../GettingStartedInPython.rst:2012
msgid ""
"Once a :api:`rdkit.Chem.rdfragcatalog.FragCatalog` has been generated, it"
" can be used to fingerprint molecules:"
msgstr ""

#: ../../GettingStartedInPython.rst:2022
msgid ""
"The rest of the machinery associated with fingerprints can now be applied"
" to these fragment fingerprints.  For example, it's easy to find the "
"fragments that two molecules have in common by taking the intersection of"
" their fingerprints:"
msgstr ""

#: ../../GettingStartedInPython.rst:2035
msgid "or we can find the fragments that distinguish one molecule from another:"
msgstr ""

#: ../../GettingStartedInPython.rst:2043
msgid ""
"Or we can use the bit ranking functionality from the "
":api:`rdkit.ML.InfoTheory.rdInfoTheory.InfoBitRanker` class to identify "
"fragments that distinguish actives from inactives:"
msgstr ""

#: ../../GettingStartedInPython.rst:2067
msgid ""
"The columns above are: bitId, infoGain, nInactive, nActive. Note that "
"this approach isn't particularly effective for this artificial example."
msgstr ""

#: ../../GettingStartedInPython.rst:2073
msgid "Non-Chemical Functionality"
msgstr ""

#: ../../GettingStartedInPython.rst:2077
msgid "Bit vectors"
msgstr ""

#: ../../GettingStartedInPython.rst:2079
msgid ""
"Bit vectors are containers for efficiently storing a set number of binary"
" values, e.g. for fingerprints. The RDKit includes two types of "
"fingerprints differing in how they store the values internally; the two "
"types are easily interconverted but are best used for different purpose:"
msgstr ""

#: ../../GettingStartedInPython.rst:2082
msgid ""
"SparseBitVects store only the list of bits set in the vector; they are "
"well suited for storing very large, very sparsely occupied vectors like "
"pharmacophore fingerprints. Some operations, such as retrieving the list "
"of on bits, are quite fast. Others, such as negating the vector, are "
"very, very slow."
msgstr ""

#: ../../GettingStartedInPython.rst:2086
msgid ""
"ExplicitBitVects keep track of both on and off bits. They are generally "
"faster than SparseBitVects, but require more memory to store."
msgstr ""

#: ../../GettingStartedInPython.rst:2091
msgid "Discrete value vectors"
msgstr ""

#: ../../GettingStartedInPython.rst:2095
msgid "3D grids"
msgstr ""

#: ../../GettingStartedInPython.rst:2099
msgid "Points"
msgstr ""

#: ../../GettingStartedInPython.rst:2103
msgid "Getting Help"
msgstr ""

#: ../../GettingStartedInPython.rst:2105
msgid ""
"There is a reasonable amount of documentation available within from the "
"RDKit's docstrings. These are accessible using Python's help command:"
msgstr ""

#: ../../GettingStartedInPython.rst:2130
msgid ""
"When working in an environment that does command completion or tooltips, "
"one can see the available methods quite easily. Here's a sample "
"screenshot from within the Jupyter notebook:"
msgstr ""

#: ../../GettingStartedInPython.rst:2137
msgid "Advanced Topics/Warnings"
msgstr ""

#: ../../GettingStartedInPython.rst:2141
msgid "Editing Molecules"
msgstr ""

#: ../../GettingStartedInPython.rst:2143
msgid ""
"Some of the functionality provided allows molecules to be edited “in "
"place”:"
msgstr ""

#: ../../GettingStartedInPython.rst:2152
msgid ""
"Do not forget the sanitization step, without it one can end up with "
"results that look ok (so long as you don't think):"
msgstr ""

#: ../../GettingStartedInPython.rst:2159
msgid "but that are, of course, complete nonsense, as sanitization will indicate:"
msgstr ""

#: ../../GettingStartedInPython.rst:2170
msgid ""
"More complex transformations can be carried out using the "
":api:`rdkit.Chem.rdchem.RWMol` class:"
msgstr ""

#: ../../GettingStartedInPython.rst:2191
msgid "The RWMol can be used just like an ROMol:"
msgstr ""

#: ../../GettingStartedInPython.rst:2200
msgid ""
"It is even easier to generate nonsense using the RWMol than it is with "
"standard molecules.  If you need chemically reasonable results, be "
"certain to sanitize the results."
msgstr ""

#: ../../GettingStartedInPython.rst:2206
msgid "Miscellaneous Tips and Hints"
msgstr ""

#: ../../GettingStartedInPython.rst:2210
msgid "Chem vs AllChem"
msgstr ""

#: ../../GettingStartedInPython.rst:2212
msgid ""
"The majority of “basic” chemical functionality (e.g. reading/writing "
"molecules, substructure searching, molecular cleanup, etc.) is in the "
":api:`rdkit.Chem` module.  More advanced, or less frequently used, "
"functionality is in :api:`rdkit.Chem.AllChem`.  The distinction has been "
"made to speed startup and lower import times; there's no sense in loading"
" the 2D->3D library and force field implementation if one is only "
"interested in reading and writing a couple of molecules.  If you find the"
" Chem/AllChem thing annoying or confusing, you can use python's “import "
"... as ...” syntax to remove the irritation:"
msgstr ""

#: ../../GettingStartedInPython.rst:2227
msgid "The SSSR Problem"
msgstr ""

#: ../../GettingStartedInPython.rst:2229
msgid ""
"As others have ranted about with more energy and eloquence than I intend "
"to, the definition of a molecule's smallest set of smallest rings is not "
"unique.  In some high symmetry molecules, a “true” SSSR will give results"
" that are unappealing.  For example, the SSSR for cubane only contains 5 "
"rings, even though there are “obviously” 6. This problem can be fixed by "
"implementing a *small* (instead of *smallest*) set of smallest rings "
"algorithm that returns symmetric results.  This is the approach that we "
"took with the RDKit."
msgstr ""

#: ../../GettingStartedInPython.rst:2238
msgid ""
"Because it is sometimes useful to be able to count how many SSSR rings "
"are present in the molecule, there is a "
":api:`rdkit.Chem.rdmolops.GetSSSR` function, but this only returns the "
"SSSR count, not the potentially non-unique set of rings."
msgstr ""

#: ../../GettingStartedInPython.rst:2245
msgid "List of Available Descriptors"
msgstr ""

#: ../../GettingStartedInPython.rst:2249 ../../GettingStartedInPython.rst:2386
msgid "Descriptor/Descriptor Family"
msgstr ""

#: ../../GettingStartedInPython.rst:2249 ../../GettingStartedInPython.rst:2386
#: ../../GettingStartedInPython.rst:2453
msgid "Notes"
msgstr ""

#: ../../GettingStartedInPython.rst:2249 ../../GettingStartedInPython.rst:2386
#: ../../GettingStartedInPython.rst:2453
msgid "Language"
msgstr ""

#: ../../GettingStartedInPython.rst:2252
msgid "Gasteiger/Marsili Partial Charges"
msgstr ""

#: ../../GettingStartedInPython.rst:2252
msgid "*Tetrahedron* **36**:3219\\-28 (1980)"
msgstr ""

#: ../../GettingStartedInPython.rst:2252 ../../GettingStartedInPython.rst:2268
#: ../../GettingStartedInPython.rst:2272 ../../GettingStartedInPython.rst:2280
#: ../../GettingStartedInPython.rst:2284 ../../GettingStartedInPython.rst:2288
#: ../../GettingStartedInPython.rst:2293 ../../GettingStartedInPython.rst:2298
#: ../../GettingStartedInPython.rst:2300 ../../GettingStartedInPython.rst:2302
#: ../../GettingStartedInPython.rst:2304 ../../GettingStartedInPython.rst:2306
#: ../../GettingStartedInPython.rst:2308 ../../GettingStartedInPython.rst:2310
#: ../../GettingStartedInPython.rst:2312 ../../GettingStartedInPython.rst:2314
#: ../../GettingStartedInPython.rst:2316 ../../GettingStartedInPython.rst:2318
#: ../../GettingStartedInPython.rst:2320 ../../GettingStartedInPython.rst:2322
#: ../../GettingStartedInPython.rst:2324 ../../GettingStartedInPython.rst:2326
#: ../../GettingStartedInPython.rst:2328 ../../GettingStartedInPython.rst:2330
#: ../../GettingStartedInPython.rst:2334 ../../GettingStartedInPython.rst:2338
#: ../../GettingStartedInPython.rst:2342 ../../GettingStartedInPython.rst:2345
#: ../../GettingStartedInPython.rst:2349 ../../GettingStartedInPython.rst:2354
#: ../../GettingStartedInPython.rst:2367 ../../GettingStartedInPython.rst:2374
#: ../../GettingStartedInPython.rst:2389 ../../GettingStartedInPython.rst:2392
#: ../../GettingStartedInPython.rst:2394 ../../GettingStartedInPython.rst:2397
#: ../../GettingStartedInPython.rst:2401 ../../GettingStartedInPython.rst:2405
#: ../../GettingStartedInPython.rst:2409 ../../GettingStartedInPython.rst:2414
#: ../../GettingStartedInPython.rst:2418 ../../GettingStartedInPython.rst:2422
#: ../../GettingStartedInPython.rst:2426 ../../GettingStartedInPython.rst:2430
#: ../../GettingStartedInPython.rst:2438 ../../GettingStartedInPython.rst:2455
#: ../../GettingStartedInPython.rst:2457 ../../GettingStartedInPython.rst:2459
#: ../../GettingStartedInPython.rst:2461 ../../GettingStartedInPython.rst:2463
#: ../../GettingStartedInPython.rst:2466 ../../GettingStartedInPython.rst:2468
#: ../../GettingStartedInPython.rst:2470
msgid "C++"
msgstr ""

#: ../../GettingStartedInPython.rst:2256
msgid "BalabanJ"
msgstr ""

#: ../../GettingStartedInPython.rst:2256
msgid "*Chem. Phys. Lett.* **89**:399\\-404 (1982)"
msgstr ""

#: ../../GettingStartedInPython.rst:2256 ../../GettingStartedInPython.rst:2260
#: ../../GettingStartedInPython.rst:2264 ../../GettingStartedInPython.rst:2276
#: ../../GettingStartedInPython.rst:2359 ../../GettingStartedInPython.rst:2363
#: ../../GettingStartedInPython.rst:2370
msgid "Python"
msgstr ""

#: ../../GettingStartedInPython.rst:2260
msgid "BertzCT"
msgstr ""

#: ../../GettingStartedInPython.rst:2260
msgid "*J. Am. Chem. Soc.* **103**:3599\\-601 (1981)"
msgstr ""

#: ../../GettingStartedInPython.rst:2264
msgid "Ipc"
msgstr ""

#: ../../GettingStartedInPython.rst:2264
msgid "*J. Chem. Phys.* **67**:4517\\-33 (1977)"
msgstr ""

#: ../../GettingStartedInPython.rst:2268
msgid "HallKierAlpha"
msgstr ""

#: ../../GettingStartedInPython.rst:2268 ../../GettingStartedInPython.rst:2272
#: ../../GettingStartedInPython.rst:2276 ../../GettingStartedInPython.rst:2280
#: ../../GettingStartedInPython.rst:2284
msgid "*Rev. Comput. Chem.* **2**:367\\-422 (1991)"
msgstr ""

#: ../../GettingStartedInPython.rst:2272
msgid "Kappa1 \\- Kappa3"
msgstr ""

#: ../../GettingStartedInPython.rst:2276
msgid "Chi0, Chi1"
msgstr ""

#: ../../GettingStartedInPython.rst:2280
msgid "Chi0n \\- Chi4n"
msgstr ""

#: ../../GettingStartedInPython.rst:2284
msgid "Chi0v \\- Chi4v"
msgstr ""

#: ../../GettingStartedInPython.rst:2288
msgid "MolLogP"
msgstr ""

#: ../../GettingStartedInPython.rst:2288 ../../GettingStartedInPython.rst:2293
msgid "Wildman and Crippen *JCICS* **39**:868\\-73 (1999)"
msgstr ""

#: ../../GettingStartedInPython.rst:2293
msgid "MolMR"
msgstr ""

#: ../../GettingStartedInPython.rst:2298
msgid "MolWt"
msgstr ""

#: ../../GettingStartedInPython.rst:2300
msgid "ExactMolWt"
msgstr ""

#: ../../GettingStartedInPython.rst:2302
msgid "HeavyAtomCount"
msgstr ""

#: ../../GettingStartedInPython.rst:2304
msgid "HeavyAtomMolWt"
msgstr ""

#: ../../GettingStartedInPython.rst:2306
msgid "NHOHCount"
msgstr ""

#: ../../GettingStartedInPython.rst:2308
msgid "NOCount"
msgstr ""

#: ../../GettingStartedInPython.rst:2310
msgid "NumHAcceptors"
msgstr ""

#: ../../GettingStartedInPython.rst:2312
msgid "NumHDonors"
msgstr ""

#: ../../GettingStartedInPython.rst:2314
msgid "NumHeteroatoms"
msgstr ""

#: ../../GettingStartedInPython.rst:2316
msgid "NumRotatableBonds"
msgstr ""

#: ../../GettingStartedInPython.rst:2318
msgid "NumValenceElectrons"
msgstr ""

#: ../../GettingStartedInPython.rst:2320
msgid "NumAmideBonds"
msgstr ""

#: ../../GettingStartedInPython.rst:2322
msgid "Num{Aromatic,Saturated,Aliphatic}Rings"
msgstr ""

#: ../../GettingStartedInPython.rst:2324
msgid "Num{Aromatic,Saturated,Aliphatic}{Hetero,Carbo}cycles"
msgstr ""

#: ../../GettingStartedInPython.rst:2326
msgid "RingCount"
msgstr ""

#: ../../GettingStartedInPython.rst:2328
msgid "FractionCSP3"
msgstr ""

#: ../../GettingStartedInPython.rst:2330
msgid "NumSpiroAtoms"
msgstr ""

#: ../../GettingStartedInPython.rst:2330
msgid "Number of spiro atoms"
msgstr ""

#: ../../GettingStartedInPython.rst:2331
msgid "(atoms shared between rings that share exactly one atom)"
msgstr ""

#: ../../GettingStartedInPython.rst:2334
msgid "NumBridgeheadAtoms"
msgstr ""

#: ../../GettingStartedInPython.rst:2334
msgid ""
"Number of bridgehead atoms (atoms shared between rings that share at "
"least two bonds)"
msgstr ""

#: ../../GettingStartedInPython.rst:2338
msgid "TPSA"
msgstr ""

#: ../../GettingStartedInPython.rst:2338
msgid "*J. Med. Chem.* **43**:3714\\-7, (2000)"
msgstr ""

#: ../../GettingStartedInPython.rst:2342
msgid "LabuteASA"
msgstr ""

#: ../../GettingStartedInPython.rst:2342
msgid "*J. Mol. Graph. Mod.* **18**:464\\-77 (2000)"
msgstr ""

#: ../../GettingStartedInPython.rst:2345
msgid "PEOE_VSA1 \\- PEOE_VSA14"
msgstr ""

#: ../../GettingStartedInPython.rst:2345
msgid ""
"MOE\\-type descriptors using partial charges and surface area "
"contributions http://www.chemcomp.com/journal/vsadesc.htm"
msgstr ""

#: ../../GettingStartedInPython.rst:2349
msgid "SMR_VSA1 \\- SMR_VSA10"
msgstr ""

#: ../../GettingStartedInPython.rst:2349
msgid ""
"MOE\\-type descriptors using MR contributions and surface area "
"contributions http://www.chemcomp.com/journal/vsadesc.htm"
msgstr ""

#: ../../GettingStartedInPython.rst:2354
msgid "SlogP_VSA1 \\- SlogP_VSA12"
msgstr ""

#: ../../GettingStartedInPython.rst:2354
msgid ""
"MOE\\-type descriptors using LogP contributions and surface area "
"contributions http://www.chemcomp.com/journal/vsadesc.htm"
msgstr ""

#: ../../GettingStartedInPython.rst:2359
msgid "EState_VSA1 \\- EState_VSA11"
msgstr ""

#: ../../GettingStartedInPython.rst:2359 ../../GettingStartedInPython.rst:2363
msgid ""
"MOE\\-type descriptors using EState indices and surface area "
"contributions (developed at RD, not described in the CCG paper)"
msgstr ""

#: ../../GettingStartedInPython.rst:2363
msgid "VSA_EState1 \\- VSA_EState10"
msgstr ""

#: ../../GettingStartedInPython.rst:2367
msgid "MQNs"
msgstr ""

#: ../../GettingStartedInPython.rst:2367
msgid "Nguyen et al. *ChemMedChem* **4**:1803\\-5 (2009)"
msgstr ""

#: ../../GettingStartedInPython.rst:2370
msgid "Topliss fragments"
msgstr ""

#: ../../GettingStartedInPython.rst:2370
msgid ""
"implemented using a set of SMARTS definitions in "
"$(RDBASE)/Data/FragmentDescriptors.csv"
msgstr ""

#: ../../GettingStartedInPython.rst:2374
msgid "Autocorr2D"
msgstr ""

#: ../../GettingStartedInPython.rst:2374 ../../GettingStartedInPython.rst:2418
#: ../../GettingStartedInPython.rst:2422 ../../GettingStartedInPython.rst:2426
#: ../../GettingStartedInPython.rst:2430 ../../GettingStartedInPython.rst:2438
msgid ""
"New in 2017.09 release. Todeschini and Consoni \"Descriptors from "
"Molecular Geometry\" Handbook of Chemoinformatics "
"http://dx.doi.org/10.1002/9783527618279.ch37"
msgstr ""

#: ../../GettingStartedInPython.rst:2381
msgid "List of Available 3D Descriptors"
msgstr ""

#: ../../GettingStartedInPython.rst:2383
msgid "These all require the molecule to have a 3D conformer."
msgstr ""

#: ../../GettingStartedInPython.rst:2389
msgid "Plane of best fit (PBF)"
msgstr ""

#: ../../GettingStartedInPython.rst:2389
msgid "Nicholas C. Firth, Nathan Brown, and Julian Blagg, *JCIM* **52**:2516\\-25"
msgstr ""

#: ../../GettingStartedInPython.rst:2392
msgid "PMI1, PMI2, PMI3"
msgstr ""

#: ../../GettingStartedInPython.rst:2392
msgid "Principal moments of inertia"
msgstr ""

#: ../../GettingStartedInPython.rst:2394
msgid "NPR1, NPR2"
msgstr ""

#: ../../GettingStartedInPython.rst:2394
msgid ""
"Normalized principal moments ratios Sauer and Schwarz *JCIM* "
"**43**:987\\-1003 (2003)"
msgstr ""

#: ../../GettingStartedInPython.rst:2397
msgid "Radius of gyration"
msgstr ""

#: ../../GettingStartedInPython.rst:2397 ../../GettingStartedInPython.rst:2405
msgid ""
"G. A. Arteca \"Molecular Shape Descriptors\" Reviews in Computational "
"Chemistry vol 9 http://dx.doi.org/10.1002/9780470125861.ch5"
msgstr ""

#: ../../GettingStartedInPython.rst:2401
msgid "Inertial shape factor"
msgstr ""

#: ../../GettingStartedInPython.rst:2401 ../../GettingStartedInPython.rst:2414
msgid ""
"Todeschini and Consoni \"Descriptors from Molecular Geometry\" Handbook "
"of Chemoinformatics http://dx.doi.org/10.1002/9783527618279.ch37"
msgstr ""

#: ../../GettingStartedInPython.rst:2405
msgid "Eccentricity"
msgstr ""

#: ../../GettingStartedInPython.rst:2409
msgid "Asphericity"
msgstr ""

#: ../../GettingStartedInPython.rst:2409
msgid ""
"A. Baumgaertner, \"Shapes of flexible vesicles\" J. Chem. Phys. 98:7496 "
"(1993) http://dx.doi.org/10.1063/1.464689"
msgstr ""

#: ../../GettingStartedInPython.rst:2414
msgid "Spherocity Index"
msgstr ""

#: ../../GettingStartedInPython.rst:2418
msgid "Autocorr3D"
msgstr ""

#: ../../GettingStartedInPython.rst:2422
msgid "RDF"
msgstr ""

#: ../../GettingStartedInPython.rst:2426
msgid "MORSE"
msgstr ""

#: ../../GettingStartedInPython.rst:2430
msgid "WHIM"
msgstr ""

#: ../../GettingStartedInPython.rst:2434 ../../GettingStartedInPython.rst:2442
msgid ""
"**Note** insufficient information is available to exactly reproduce "
"values from DRAGON for these descriptors. We believe that this is close."
msgstr ""

#: ../../GettingStartedInPython.rst:2438
msgid "GETAWAY"
msgstr ""

#: ../../GettingStartedInPython.rst:2450
msgid "List of Available Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:2453
msgid "Fingerprint Type"
msgstr ""

#: ../../GettingStartedInPython.rst:2455
msgid "RDKit"
msgstr ""

#: ../../GettingStartedInPython.rst:2455
msgid "a Daylight\\-like fingerprint based on hashing molecular subgraphs"
msgstr ""

#: ../../GettingStartedInPython.rst:2457
msgid "Atom Pairs"
msgstr ""

#: ../../GettingStartedInPython.rst:2457
msgid "*JCICS* **25**:64\\-73 (1985)"
msgstr ""

#: ../../GettingStartedInPython.rst:2459
msgid "Topological Torsions"
msgstr ""

#: ../../GettingStartedInPython.rst:2459
msgid "*JCICS* **27**:82\\-5 (1987)"
msgstr ""

#: ../../GettingStartedInPython.rst:2461
msgid "MACCS keys"
msgstr ""

#: ../../GettingStartedInPython.rst:2461
msgid "Using the 166 public keys implemented as SMARTS"
msgstr ""

#: ../../GettingStartedInPython.rst:2463
msgid "Morgan/Circular"
msgstr ""

#: ../../GettingStartedInPython.rst:2463
msgid ""
"Fingerprints based on the Morgan algorithm, similar to the ECFP/FCFP "
"fingerprints *JCIM* **50**:742\\-54 (2010)."
msgstr ""

#: ../../GettingStartedInPython.rst:2466
msgid "2D Pharmacophore"
msgstr ""

#: ../../GettingStartedInPython.rst:2466
msgid "Uses topological distances between pharmacophoric points."
msgstr ""

#: ../../GettingStartedInPython.rst:2468
msgid "Pattern"
msgstr ""

#: ../../GettingStartedInPython.rst:2468
msgid "a topological fingerprint optimized for substructure screening"
msgstr ""

#: ../../GettingStartedInPython.rst:2470
msgid "Extended Reduced Graphs"
msgstr ""

#: ../../GettingStartedInPython.rst:2470
msgid ""
"Derived from the ErG fingerprint published by Stiefl et al. in *JCIM* "
"**46**:208\\–20 (2006). NOTE: these functions return an array of floats, "
"not the usual fingerprint types"
msgstr ""

#: ../../GettingStartedInPython.rst:2477
msgid "Feature Definitions Used in the Morgan Fingerprints"
msgstr ""

#: ../../GettingStartedInPython.rst:2479
msgid ""
"These are adapted from the definitions in Gobbi, A. & Poppinger, D. "
"“Genetic optimization of combinatorial libraries.” *Biotechnology and "
"Bioengineering* **61**, 47-54 (1998)."
msgstr ""

#: ../../GettingStartedInPython.rst:2482
msgid "Feature"
msgstr ""

#: ../../GettingStartedInPython.rst:2482
msgid "SMARTS"
msgstr ""

#: ../../GettingStartedInPython.rst:2484
msgid "Donor"
msgstr ""

#: ../../GettingStartedInPython.rst:2484
msgid "``[$([N;!H0;v3,v4&+1]),$([O,S;H1;+0]),n&H1&+0]``"
msgstr ""

#: ../../GettingStartedInPython.rst:2486
msgid "Acceptor"
msgstr ""

#: ../../GettingStartedInPython.rst:2486
msgid "``[$([O,S;H1;v2;!$(*-*=[O,N,P,S])]),$([O,S;H0;v2]),$([O,S;-]),$([N;v3;!$(N-*=[O,N,P,S])]),n&H0&+0,$([o,s;+0;!$([o,s]:n);!$([o,s]:c:n)])]``"
msgstr ""

#: ../../GettingStartedInPython.rst:2488
msgid "Aromatic"
msgstr ""

#: ../../GettingStartedInPython.rst:2488
msgid "``[a]``"
msgstr ""

#: ../../GettingStartedInPython.rst:2490
msgid "Halogen"
msgstr ""

#: ../../GettingStartedInPython.rst:2490
msgid "``[F,Cl,Br,I]``"
msgstr ""

#: ../../GettingStartedInPython.rst:2492
msgid "Basic"
msgstr ""

#: ../../GettingStartedInPython.rst:2492
msgid "``[#7;+,$([N;H2&+0][$([C,a]);!$([C,a](=O))]),$([N;H1&+0]([$([C,a]);!$([C,a](=O))])[$([C,a]);!$([C,a](=O))]),$([N;H0&+0]([C;!$(C(=O))])([C;!$(C(=O))])[C;!$(C(=O))])]``"
msgstr ""

#: ../../GettingStartedInPython.rst:2494
msgid "Acidic"
msgstr ""

#: ../../GettingStartedInPython.rst:2494
msgid "``[$([C,S](=[O,S,P])-[O;H1,-1])]``"
msgstr ""

#: ../../GettingStartedInPython.rst:2498
msgid "Footnotes"
msgstr ""

#: ../../GettingStartedInPython.rst:2499
msgid ""
"Blaney, J. M.; Dixon, J. S. \"Distance Geometry in Molecular Modeling\"."
"  *Reviews in Computational Chemistry*; VCH: New York, 1994."
msgstr ""

#: ../../GettingStartedInPython.rst:2500
msgid ""
"Rappé, A. K.; Casewit, C. J.; Colwell, K. S.; Goddard III, W. A.; Skiff, "
"W. M. \"UFF, a full periodic table force field for molecular mechanics "
"and molecular dynamics simulations\". *J. Am. Chem. Soc.* "
"**114**:10024-35 (1992) ."
msgstr ""

#: ../../GettingStartedInPython.rst:2501
msgid ""
"Carhart, R.E.; Smith, D.H.; Venkataraghavan R. “Atom Pairs as Molecular "
"Features in Structure-Activity Studies: Definition and Applications” *J. "
"Chem. Inf. Comp. Sci.* **25**:64-73 (1985)."
msgstr ""

#: ../../GettingStartedInPython.rst:2502
msgid ""
"Nilakantan, R.; Bauman N.; Dixon J.S.; Venkataraghavan R. “Topological "
"Torsion: A New Molecular Descriptor for SAR Applications. Comparison with"
" Other Desciptors.” *J. Chem.Inf. Comp. Sci.* **27**:82-5 (1987)."
msgstr ""

#: ../../GettingStartedInPython.rst:2503
msgid ""
"Rogers, D.; Hahn, M. “Extended-Connectivity Fingerprints.” *J. Chem. Inf."
" and Model.* **50**:742-54 (2010)."
msgstr ""

#: ../../GettingStartedInPython.rst:2504
msgid ""
"Ashton, M. et al. “Identification of Diverse Database Subsets using "
"Property-Based and Fragment-Based Molecular Descriptions.” *Quantitative "
"Structure-Activity Relationships* **21**:598-604 (2002)."
msgstr ""

#: ../../GettingStartedInPython.rst:2505
msgid ""
"Bemis, G. W.; Murcko, M. A. \"The Properties of Known Drugs. 1. Molecular"
" Frameworks.\" *J. Med. Chem.*  **39**:2887-93 (1996)."
msgstr ""

#: ../../GettingStartedInPython.rst:2506
msgid ""
"Lewell, X.Q.; Judd, D.B.; Watson, S.P.; Hann, M.M. “RECAP-Retrosynthetic "
"Combinatorial Analysis Procedure: A Powerful New Technique for "
"Identifying Privileged Molecular Fragments with Useful Applications in "
"Combinatorial Chemistry” *J. Chem. Inf. Comp. Sci.* **38**:511-22 (1998)."
msgstr ""

#: ../../GettingStartedInPython.rst:2507
msgid ""
"Degen, J.; Wegscheid-Gerlach, C.; Zaliani, A; Rarey, M. \"On the Art of "
"Compiling and Using ‘Drug-Like’ Chemical Fragment Spaces.\" *ChemMedChem*"
" **3**:1503–7 (2008)."
msgstr ""

#: ../../GettingStartedInPython.rst:2508
msgid ""
"Gobbi, A. & Poppinger, D. \"Genetic optimization of combinatorial "
"libraries.\" *Biotechnology and Bioengineering* **61**:47-54 (1998)."
msgstr ""

#: ../../GettingStartedInPython.rst:2509
msgid ""
"A more detailed description of reaction smarts, as defined by the rdkit, "
"is in the :doc:`RDKit_Book`."
msgstr ""

#: ../../GettingStartedInPython.rst:2510
msgid ""
"Halgren, T. A. \"Merck molecular force field. I. Basis, form, scope, "
"parameterization, and performance of MMFF94.\" *J. Comp. Chem.* "
"**17**:490–19 (1996)."
msgstr ""

#: ../../GettingStartedInPython.rst:2511
msgid ""
"Halgren, T. A. \"Merck molecular force field. II. MMFF94 van der Waals "
"and electrostatic parameters for intermolecular interactions.\" *J. Comp."
" Chem.* **17**:520–52 (1996)."
msgstr ""

#: ../../GettingStartedInPython.rst:2512
msgid ""
"Halgren, T. A. \"Merck molecular force field. III. Molecular geometries "
"and vibrational frequencies for MMFF94.\" *J. Comp. Chem.* **17**:553–86 "
"(1996)."
msgstr ""

#: ../../GettingStartedInPython.rst:2513
msgid ""
"Halgren, T. A. & Nachbar, R. B. \"Merck molecular force field. IV. "
"conformational energies and geometries for MMFF94.\" *J. Comp. Chem.* "
"**17**:587-615 (1996)."
msgstr ""

#: ../../GettingStartedInPython.rst:2514
msgid ""
"Halgren, T. A. \"MMFF VI. MMFF94s option for energy minimization "
"studies.\" *J. Comp. Chem.* **20**:720–9 (1999)."
msgstr ""

#: ../../GettingStartedInPython.rst:2515
msgid ""
"Riniker, S.; Landrum, G. A. \"Similarity Maps - A Visualization Strategy "
"for Molecular Fingerprints and Machine-Learning Methods\" *J. Cheminf.* "
"**5**:43 (2013)."
msgstr ""

#: ../../GettingStartedInPython.rst:2516
msgid ""
"Riniker, S.; Landrum, G. A. \"Better Informed Distance Geometry: Using "
"What We Know To Improve Conformation Generation\" *J. Chem. Inf. Comp. "
"Sci.* **55**:2562-74 (2015)"
msgstr ""

#: ../../GettingStartedInPython.rst:2522
msgid "License"
msgstr ""

#: ../../GettingStartedInPython.rst:2526
msgid "This document is copyright (C) 2007-2016 by Greg Landrum"
msgstr ""

#: ../../GettingStartedInPython.rst:2528
msgid ""
"This work is licensed under the Creative Commons Attribution-ShareAlike "
"4.0 License. To view a copy of this license, visit "
"http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to "
"Creative Commons, 543 Howard Street, 5th Floor, San Francisco, "
"California, 94105, USA."
msgstr ""

#: ../../GettingStartedInPython.rst:2532
msgid ""
"The intent of this license is similar to that of the RDKit itself. In "
"simple words: “Do whatever you want with it, but please give us some "
"credit.”"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Greg Landrum
# This file is distributed under the same license as the The RDKit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The RDKit 2017.09\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-23 11:34+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../GettingStartedInC++.md:5
msgid ""
"This document is intended to provide an overview of how one can use the "
"RDKit functionality from C++. Like the 'Getting Started with the RDKit in"
" Python' it is not comprehensive and it's not a manual.  It is modelled "
"very closely on the Python version, and most of the text will be similar "
"if not identical.  It is a work-in-progress, and will be added to over "
"the coming months."
msgstr ""

#: ../../GettingStartedInC++.md:14
msgid ""
"Unlike Python scripts, which, once the environment is setup up correctly,"
" can be run directly from a script or Jupyter notebook session, the C++ "
"programs must be compiled and linked before they can be run. This creates"
" an additional step, which varies with operating system.  Using the "
"program cmake makes it easier, but you may need to experiment and change "
"settings to get this working.  You will need a reasonably modern C++ "
"compiler. On linux systems this will most likely be the GNU compiler gcc,"
" although it could be Clang.  On Macs, the opposite is true, and on "
"Windows machines it will probably be Visual C++.  At present, RDKit uses "
"a relatively old-fashioned (or, as Greg prefers, \"maximally backwards "
"compatible\") dialect of C++, so gcc version 3.4 or higher is adequate, "
"but this is due to change within the next year."
msgstr ""

#: ../../GettingStartedInC++.md:28
msgid ""
"C++ programs generally have quite a lot of extra verbiage in them "
"compared to, for example, python scripts, that is similar or identical in"
" all programs.  The would produce extraneous clutter in the example code "
"in this document.  Because of this, only the minimum code to exemplify "
"the point being made is shown in the text. Full programs for all the "
"examples (generally with multiple examples in the same program) are given"
" in the $RDBASE/Docs/Book/C++Examples directory in the distribution. The "
"particular program will be mentioned in the text."
msgstr ""

#: ../../GettingStartedInC++.md:37
msgid ""
"The functions of the RDKit system are declared in a large number of "
"different header files spread across several directories in the system, "
"and defined across a number of different libraries.  The right headers "
"will need to be included in the source code, and libraries linked to "
"during linking.  Whilst it's possible to include all headers and "
"libraries in all executables this will result in slower compile times, "
"especially if you are doing static linking.  When linking to the static "
"(.a) libraries rather than the shared-object (.so) ones, the order the "
"libraries appear in linking list can be important.  See the "
"CMakeLists.txt file in C++Examples directory for a good order.  In this "
"case, the same library list is used for all examples, so some will be "
"unnecessary for some of the programs. The first 3 programs don't need the"
" Depictor and SubstructMatch libraries, for instance, although on my "
"Ubuntu 16.04 system, the RDGeometryLib appears to need to be included "
"twice. Working out which libraries need to be linked to and in what order"
" can involve a tedious amount of trial and error."
msgstr ""

#: ../../GettingStartedInC++.md:57
msgid ""
"There is no doubt that it is much easier get started with Python.  If you"
" follow the installation instructions, you will be able to start "
"programming and using scripts straightaway.  If all you are going to do "
"is use scripts to do relatively simple things, essentially stitching "
"RDKit function calls together, there should be little or no speed issues "
"with using the Python interpreted language, as all the RDKit functions "
"are compiled C++ and well optimised. However, if you are going to do more"
" complicated things, using a lot of your own programming logic and only "
"using the RDKit for peripheral things like I/O, SMARTS matching, "
"preparing 2D images and the like, then it is likely that you will have "
"good performance gains if you write in C++ and compile to a native "
"executable.  One reason for faster executables from C++ is that because "
"the code is only compiled once, it can be worth the compiler spending "
"more time optimising the code for speed.  In Python, where the "
"compilation is done each time at run-time, this overhead is less "
"acceptable.  Writing inefficient code is relatively easy in any language,"
" but the C++ compiler can save you from yourself-at higher optimisation "
"levels, it will re-arrange loops, factorise expressions etc., so that the"
" final executable may be difficult to align with the original source "
"code.  For example (Huw!), the gcc will change sqrt(a) * sqrt(b) to "
"sqrt(a*b) removing an expensive square root operation."
msgstr ""

#: ../../GettingStartedInC++.md:80
msgid ""
"Another consideration is the completeness of the API.  A lot of the "
"higher level functionality in RDKit is developed in Python, and back-"
"porting to C++ occurs on a demand-driven basis.  There are therefore "
"examples of quite useful functionality, such as computing the RMS "
"differences between conformers that are not available in C++. Of course, "
"if this affects you you can always implement the C++ version and submit a"
" Pull Request. Indeed, the RMS calculation is on its way."
msgstr ""

#: ../../GettingStartedInC++.md:90
msgid ""
"Memory leaks (where objects are created using new but never destroyed "
"using delete) are particularly insidious bugs that can be difficult to "
"track down (Valgrind is your friend!) and may be a surprise to people "
"used to managed-memory languages like python and java.  In RDKit, many of"
" the functions return pointers to molecules and accept such pointers as "
"arguments.  The Boost libraries provide tools such as shared "
"(boost::shared_ptr) and scoped (boost::scoped_ptr) pointers that can be "
"very helpful in preventing memory leaks.  If an object is created and a "
"pointer to it is stored in a shared pointer, for example, then when the "
"shared pointer goes out of scope, the object is automatically deleted.  "
"Otherwise, the shared pointer is used exactly as one would use an "
"ordinary pointer.  To save some typing, RDKit has a number of typedefs "
"for shared pointers to its objects, defined in the relevant header files."
"  Two particularly useful ones are RDKit::ROMOL_SPTR and "
"RDKit::RWMOL_SPTR, for RDKit::ROMol and RDKit::RWMol objects "
"respectively."
msgstr ""

#: ../../GettingStartedInC++.md:109
msgid ""
"Something that isn't just relevant to the RDKit, but worth noting "
"generally, is that the new C++ standard also has shared_ptr and "
"scoped_ptr in the standard namespace (essentially, they've adopted the "
"boost libraries).  As I discovered the hard way, if you put using "
"namespace boost and using namespace std at the top of your source file "
"(and let's face it, who doesn't?), and use the unqualified name "
"shared_ptr in your code, then, when you start using C++11, you'll have to"
" go all through your code explicitly stating whether you're using "
"std::shared_ptr or boost::shared_ptr.  Worth getting in the habit now!"
msgstr ""

#: ../../GettingStartedInC++.md:122
msgid ""
"Unlike in the Python libraries, in C++ there are two different molecule "
"classes, RDKit::ROMol and RDKit::RWMol.  They are both declared in "
"GraphMol.h. ROMol (the Read-Only molecule) is used in most instances. It "
"can't be edited.  On those occasions where you will need to edit the "
"molecule, you'll need to use the RWMol (Read-Write)."
msgstr ""

#: ../../GettingStartedInC++.md:130
msgid ""
"The majority of basic molecular functionality is found in the RDKit "
"namespace, and only a small number of header files will need to be "
"included to cover most use cases:"
msgstr ""

#: ../../GettingStartedInC++.md:141
msgid ""
"Individual molecules can be constructed using a variety of approaches "
"(example1):"
msgstr ""

#: ../../GettingStartedInC++.md:155
msgid ""
"All these return a pointer to an ROMol on success, or NULL on failure. "
"Obviously, the object must be deleted when finished with to prevent "
"memory leaks. In the example above, and henceforth in this document, the "
"molecules, apart from mol1, are wrapped in shared pointers so that the "
"objects are deleted as soon as the shared pointer goes out of scope."
msgstr ""

#: ../../GettingStartedInC++.md:162
msgid ""
"If the molecule can't be sanitized after SMILES parsing, an "
"RDKit::MolSanitizeException (derived from std::exception) is thrown, and "
"an attempt is made to provide sensible error messages (example1):"
msgstr ""

#: ../../GettingStartedInC++.md:175
msgid ""
"displays something like [15:58:22] Explicit valence of atom # 1 O, 3, is "
"greater than permitted and (example1)"
msgstr ""

#: ../../GettingStartedInC++.md:186
msgid "displays something like: [12:20:41] Can't kekulize mol."
msgstr ""

#: ../../GettingStartedInC++.md:190
msgid ""
"Groups of molecules are read using a Supplier (for example, an "
"RDKit::SDMolSupplier or an RDKit::SmilesMolSupplier) (example2):"
msgstr ""

#: ../../GettingStartedInC++.md:206 ../../GettingStartedInC++.md:226
#: ../../GettingStartedInC++.md:298 ../../GettingStartedInC++.md:342
#: ../../GettingStartedInC++.md:357 ../../GettingStartedInC++.md:386
#: ../../GettingStartedInC++.md:422 ../../GettingStartedInC++.md:452
#: ../../GettingStartedInC++.md:587 ../../GettingStartedInC++.md:627
#: ../../GettingStartedInC++.md:658 ../../GettingStartedInC++.md:690
#: ../../GettingStartedInC++.md:705 ../../GettingStartedInC++.md:722
#: ../../GettingStartedInC++.md:742 ../../GettingStartedInC++.md:754
#: ../../GettingStartedInC++.md:776 ../../GettingStartedInC++.md:806
#: ../../GettingStartedInC++.md:829 ../../GettingStartedInC++.md:842
#: ../../GettingStartedInC++.md:1288 ../../GettingStartedInC++.md:1347
#: ../../GettingStartedInC++.md:1373 ../../GettingStartedInC++.md:1419
#: ../../GettingStartedInC++.md:1439
msgid "gives"
msgstr ""

#: ../../GettingStartedInC++.md:214
msgid "The supplier can be treated as a random-access object (example2):"
msgstr ""

#: ../../GettingStartedInC++.md:234
msgid ""
"A good practice is to test each molecule to see if it was correctly read "
"before working with it (example2):"
msgstr ""

#: ../../GettingStartedInC++.md:251
msgid ""
"An alternative type of Supplier, the RDKit::ForwardMolSupplier can be "
"used to read from file-like objects.  This allows the reading of "
"compressed files, using, for example, the boost::iostreams objects "
"(example2):"
msgstr ""

#: ../../GettingStartedInC++.md:275
msgid ""
"Note that the forward suppliers cannot be used in random-access mode, and"
" a compile-time error will result if you attempt to (example2):"
msgstr ""

#: ../../GettingStartedInC++.md:286
msgid ""
"Single molecules can be converted to text using several functions present"
" in the RDKit namespace."
msgstr ""

#: ../../GettingStartedInC++.md:289
msgid "For example, for SMILES (example3):"
msgstr ""

#: ../../GettingStartedInC++.md:302
msgid "and (example3)"
msgstr ""

#: ../../GettingStartedInC++.md:307
msgid "produces"
msgstr ""

#: ../../GettingStartedInC++.md:311
msgid ""
"where the isomeric in the second function call specifies that isomeric "
"SMILES should be produced. Note that the SMILES produced is canonical, so"
" the output should be the same no matter how a particular molecule is "
"input.  For example (example3)"
msgstr ""

#: ../../GettingStartedInC++.md:328
msgid "all produce c1ccncc1 as output."
msgstr ""

#: ../../GettingStartedInC++.md:330
msgid ""
"If you'd like to have the Kekule form of the SMILES, you need to Kekulize"
" an RWMol copy of the molecule, using the Kekulize function declared in "
"MolOps.h (example3):"
msgstr ""

#: ../../GettingStartedInC++.md:347
msgid ""
"Note: as of March 2017, the SMILES provided when one requests "
"kekuleSmiles are not canonical. The limitation is not in the SMILES "
"generation, but in the kekulization itself."
msgstr ""

#: ../../GettingStartedInC++.md:351
msgid "MDL Mol blocks are also available (example3):"
msgstr ""

#: ../../GettingStartedInC++.md:378
msgid ""
"To include names in the mol blocks, set the molecule's “_Name” property "
"(example3):"
msgstr ""

#: ../../GettingStartedInC++.md:402
msgid ""
"Note that setProp, which is a general function, can be called on an ROMol"
" as well as an RWMol, which came as a surprise to me as I had assumed a "
"read-only molecule would be less changeable than that."
msgstr ""

#: ../../GettingStartedInC++.md:406
msgid ""
"In order for atom or bond stereochemistry to be recognised correctly by "
"most software, it's essential that the Mol block have atomic coordinates."
" It's also convenient for many reasons, such as drawing the molecules."
msgstr ""

#: ../../GettingStartedInC++.md:410
msgid ""
"You can either include 2D coordinates (i.e. a depiction), using the "
"function in the RDDepict namespace and declared in RDDepictor.h "
"(example4):"
msgstr ""

#: ../../GettingStartedInC++.md:439
msgid "Or you can add 3D coordinates by embedding the molecule (example4):"
msgstr ""

#: ../../GettingStartedInC++.md:469
msgid ""
"The optimization step isn't necessary, but it substantially improves the "
"quality of the conformation."
msgstr ""

#: ../../GettingStartedInC++.md:472
msgid ""
"To get good 3D conformations, it's almost always a good idea to add "
"hydrogens to the molecule first (example4):"
msgstr ""

#: ../../GettingStartedInC++.md:483
msgid ""
"<a name=\"twoAddHs\"></a>Note that there are 2 overloaded versions of "
"addHs. The first takes an ROMol and, because that can't be edited, "
"returns a pointer to a new ROMol with the result.  If you use this "
"version be careful not to leak memory by not deleting mol2 when you are "
"finished with it. The second takes an RWMol which it is able to modify in"
" place.  With shared pointers, memory leaks can be avoided (example4):"
msgstr ""

#: ../../GettingStartedInC++.md:496
msgid ""
"Once the optimisation is complete, the hydrogens can be removed again "
"(example4):"
msgstr ""

#: ../../GettingStartedInC++.md:504
msgid ""
"Again, there are two versions, one of which has an opportunity for a "
"memory leak."
msgstr ""

#: ../../GettingStartedInC++.md:507
msgid ""
"If you'd like write the molecules to file, use the normal C++ streams "
"(example4):"
msgstr ""

#: ../../GettingStartedInC++.md:520
msgid ""
"Multiple molecules can be written to a file using an object of a concrete"
" subclass of the MolWriter class (example5):"
msgstr ""

#: ../../GettingStartedInC++.md:547
msgid ""
"A MolWriter can also be initialised to a file-like object, so compressed "
"files can be written or molecules can be written to a string in memory "
"(example5):"
msgstr ""

#: ../../GettingStartedInC++.md:566
msgid ""
"Other available writers include SmilesWriter and TDTWriter (for those of "
"you with an interest in historical Cheminformatics)."
msgstr ""

#: ../../GettingStartedInC++.md:573
msgid ""
"Once you have a molecule, it's relatively easy to loop over its atoms and"
" bonds so long as you remember that an atom is a Vertex and a bond is an "
"Edge and accept the odd syntax (example6):"
msgstr ""

#: ../../GettingStartedInC++.md:591
msgid "As an alternative, there are AtomIterators and BondIterators(example6):"
msgstr ""

#: ../../GettingStartedInC++.md:602
msgid ""
"which is functionally equivalent to the above. Finally, there's a method "
"that uses the fact that atoms and bonds can be selected by index number "
"(example6):"
msgstr ""

#: ../../GettingStartedInC++.md:612
msgid "Likewise with bonds (example6):"
msgstr ""

#: ../../GettingStartedInC++.md:633
msgid ""
"A bond can be specified by the atoms at its ends, with a NULL pointer "
"being returned if there isn't one (example6):"
msgstr ""

#: ../../GettingStartedInC++.md:646
msgid ""
"The neighbours of an atom can also be extracted, but note that you need "
"an ADJ_ITER rather than a VERTEX_ITER (example6):"
msgstr ""

#: ../../GettingStartedInC++.md:667
msgid ""
"It is relatively easy to obtain ring information for atoms and bonds "
"(example7):"
msgstr ""

#: ../../GettingStartedInC++.md:695
msgid ""
"Obviously, findSSSR only needs to be called once for the molecule. If you"
" only need to know whether the atom or bond is in a ring, just test "
"whether or not the return value is zero (example7):"
msgstr ""

#: ../../GettingStartedInC++.md:709
msgid ""
"Other information about presence in smallest rings can also be obtained "
"from the RingInfo object of the molecule (example7):"
msgstr ""

#: ../../GettingStartedInC++.md:729
msgid ""
"More detail about the smallest set of smallest rings (SSSR) is available "
"(example7):"
msgstr ""

#: ../../GettingStartedInC++.md:748
msgid ""
"As the name suggests, this is a symmetrized SSSR; if you are interested "
"in the number of \"true\" SSSR, use the findSSSR function (example7):"
msgstr ""

#: ../../GettingStartedInC++.md:758
msgid ""
"The distinction between symmetrized and non-symmetrized SSSR is discussed"
" in more detail below in the section The SSSR Problem."
msgstr ""

#: ../../GettingStartedInC++.md:764
msgid ""
"Normally molecules are stored in the RDKit with the hydrogen atoms "
"implicit (i.e. not explicitly present in the molecular graph).  When it "
"is useful to have the hydrogens explicitly present, for example when "
"generating or optimizing the 3D geometry, the RDKit::MolOps::addHs "
"function can be used (example8)."
msgstr ""

#: ../../GettingStartedInC++.md:781
msgid ""
"Recall that there are two versions of RDKit::MolOps::addHs, as described "
"above. The Hs can be removed again using the RDKit::MolOps::RemoveHs "
"function, which again has two forms (example8):"
msgstr ""

#: ../../GettingStartedInC++.md:791
msgid "which returns the atom count to 3."
msgstr ""

#: ../../GettingStartedInC++.md:793
msgid ""
"RDKit molecules are usually stored with the bonds in aromatic rings "
"having aromatic bond types. This can be changed with the "
"RDKit::MolOps::Kekulize function, which must be called with an RWMol "
"(example9):"
msgstr ""

#: ../../GettingStartedInC++.md:813
msgid ""
"The bond orders are defined as the enum BondType in Bond.h, and an "
"aromatic bond currently has the value 12. Note that by default the "
"Kekulize function clears the aromatic flags on the atoms and bonds. This "
"is in contrast to the Python version of Kekulize, which preserves the "
"flags by default.  The behaviour can be forced explicitly (example9.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:835
msgid ""
"Bonds can be restored to the aromatic bond type using the "
"RDKit::MolOps::sanitizeMol function:"
msgstr ""

#: ../../GettingStartedInC++.md:847
msgid "once more."
msgstr ""

#: ../../GettingStartedInC++.md:851
msgid ""
"The RDKit has a library for generating depictions (sets of 2D "
"coordinates) for molecules.  This library, which is part of the RDDepict "
"namespace, is accessed via the RDDepict::Compute2DCoords function "
"(example10.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:863
msgid ""
"The 2D conformation is constructed to minimize intramolecular clashes, "
"i.e. to maximize the clarity of the drawing.  Unlike the Python "
"equivalent, the depiction is not placed in a canonical orientation by "
"default. This can be forced by passing true as the third parameter "
"(example10.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:875
msgid ""
"The point.h must be included for the typedef that defines "
"INT_POINT2D_MAP, of which more later. By default, all existing "
"conformations are removed when the 2D coordinates are created.  This can "
"be changed by passing false as a 4th parameter.  The 2D coordinates are "
"added as another conformation of the molecule so it's a bit tricky "
"combining them both in the same molecule, and probably best avoided."
msgstr ""

#: ../../GettingStartedInC++.md:883
msgid ""
"The Python API has a convenience function "
"GenerateDepictionMatching2DStructure which forces the 2D coordinate "
"generation to orientate molecules according to a template structure. A "
"C++ version of the function, generateDepictionMatching2DStructure was "
"included in late December 2016.  If that is later than the version of "
"RDKit you are using, then the effect can be achieved thus: "
"(example10.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:910
msgid ""
"Here, coordMap maps the coordinates of atoms in the target molecule templ"
" onto corresponding atoms in the reference molecule."
msgstr ""

#: ../../GettingStartedInC++.md:913
msgid ""
"It is also possible to produce a 2D picture that attempts to mimic as "
"closely as possible a 3D conformation.  Again, an equivalent of the "
"Python function rdkit.Chem.AllChem.GenerateDepictionMatching3DStructure "
"was incorporated in December 2016."
msgstr ""

#: ../../GettingStartedInC++.md:921
msgid ""
"The RDKit can generate conformations for molecules using two different "
"methods.  The original method uses distance geometry [1]. The algorithm "
"followed is:"
msgstr ""

#: ../../GettingStartedInC++.md:940
msgid ""
"Note that the conformations that result from this procedure tend to be "
"fairly ugly. They should be cleaned up using a force field. This can be "
"done within the RDKit using its implementation of the Universal Force "
"Field UFF[2]."
msgstr ""

#: ../../GettingStartedInC++.md:945
msgid ""
"More recently, there is an implementation of the method of Riniker and "
"Landrum [3] which uses torsion angle preferences from the Cambridge "
"Structural Database (CSD) to correct the conformers after distance "
"geometry has been used to generate them.  With this method, there should "
"be no need to use a minimisation step to clean up the structures; indeed,"
" it is often undesirable as it may move the torsions away from the CSD-"
"based distributions, somewhat negating the point."
msgstr ""

#: ../../GettingStartedInC++.md:954
msgid ""
"The full process of embedding and optimizing a molecule is easier than "
"all the above verbiage makes it sound (example11.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:974
msgid ""
"The Riniker and Landrum method has a number of parameters that may be "
"altered for various reasons beyond the scope of this document. One that "
"you may want to alter is the random number seed; setting the random "
"number seed to other than the default -1 ensures that the same "
"conformations are produced each time the code is run.  This is convenient"
" when testing to ensure reproducibility of results.  To make it easier to"
" vary the parameters, there is the EmbedParameters class which is "
"initialised to the default values on construction, and whose individual "
"values can be varied as desired."
msgstr ""

#: ../../GettingStartedInC++.md:984
msgid ""
"The RDKit also has an implementation of the MMFF94 force field available "
"[4], [5], [6], [7], [8]. (example11.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:994
msgid ""
"Please note that the MMFF atom typing code uses its own aromaticity "
"model, so the aromaticity flags of the molecule will be modified after "
"calling MMFF-related methods. Note the calls to RDKit::MolOps::addHs() in"
" the examples above. By default RDKit molecules do not have H atoms "
"explicitly present in the graph, but they are important for getting "
"realistic geometries, so they generally should be added.  They can always"
" be removed afterwards if necessary with a call to "
"RDKit::MolOps::removeHs()"
msgstr ""

#: ../../GettingStartedInC++.md:1003
msgid ""
"With the RDKit, multiple conformers can also be generated using the two "
"different embedding methods. In both cases this is simply a matter of "
"running the distance geometry calculation multiple times from different "
"random start points. The 2nd parameter to EmbedMultipleConfs allows the "
"user to set the number of conformers that should be generated.  Otherwise"
" the procedures are similar to before (example11.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1021
msgid ""
"The conformer ids are returned in mol1_cids and mol2_cids and there are "
"two overloaded functions with different ways of supplying the "
"information.  As before, the CSD-based method is invoked by "
"EmbedParameters object, and in the example above the default number of "
"conformations to be produced has been changed from 10 to 20. The "
"conformers so generated can be aligned to each other and the RMS values "
"calculated (example11.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1041
msgid ""
"The RMS values for the overlays will be fed into rms_list on return. Note"
" the somewhat inconvenient issue that EmbedMultipleConfs returns a vector"
" of ints for the conformer ids, but alignMolConformers requires a vector "
"of unsigned ints. The reason for this is that EmbedMultipleConfs uses -1 "
"to denote a failed embedding.  The first vector of unsigned ints in the "
"alignMolConformers declaration is atom ids, and allows the alignment to "
"be performed on just a subset of atoms which can be convenient for "
"overlaying a core and seeing how the other bits of the molecule varied in"
" the different conformations."
msgstr ""

#: ../../GettingStartedInC++.md:1052
msgid ""
"There is no C++ equivalent to the Python function "
"AllChem.GetConformerRMS() to compute the RMS between two specific "
"conformers (e.g. 1 and 9) although it is coming."
msgstr ""

#: ../../GettingStartedInC++.md:1056
msgid ""
"It is important to remember that unless you specify a random number seed,"
" you will not necessarily get the same conformations each time you run "
"the embedding on the same molecule, especially if you only generate a "
"small number of conformations relative to the number of torsions in the "
"structure.  If it's important in your use-case that you have a good "
"sampling of the conformations including all the low-energy ones, you "
"should be sure to specify a large maximum number of conformations."
msgstr ""

#: ../../GettingStartedInC++.md:1065
msgid ""
"Disclaimer/Warning: Conformation generation is a difficult and subtle "
"task. The original, default, 2D->3D conversion provided with the RDKit is"
" not intended to be a replacement for a “real” conformational analysis "
"tool; it merely provides quick 3D structures for cases when they are "
"required. On the other hand, the second method, when a sufficiently large"
" number of conformers are generated, should be adequate for most "
"purposes. It is probably better to ignore the first, historical, method "
"entirely. It is only left as the default method to avoid breaking "
"existing code."
msgstr ""

#: ../../GettingStartedInC++.md:1077
msgid ""
"Molecules can be preserved, or serialised, or pickled, using the class "
"MolPickler in the namespace of the same name: (example12.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1091
msgid ""
"Note that the string is in binary format and will appear as gibberish if "
"printed to a screen. The RDKit pickle format is fairly compact and it is "
"much, much faster to build a molecule from a pickle than from a Mol file "
"or SMILES string, so storing pickles of molecules you will be working "
"with repeatedly can be a good idea: (example12.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1131
msgid ""
"However, currently the pickling process does not preserve and properties "
"attached to the molecule, which included the molecule name (property "
"\"_Name\"). This will change in the 2017.03 release."
msgstr ""

#: ../../GettingStartedInC++.md:1136
msgid ""
"The RDKit has some built-in functionality for drawing molecules, found in"
" the RDKit namespace, with header files in "
"$RDBASE/Code/GraphMol/MolDraw2D.  There is an abstract base class "
"MolDraw2D which defines the interface and does the drawing, with concrete"
" classes for drawing to SVG or PNG files and Qt and wx widgets.  Only the"
" SVG output is built by default, Cairo support requires the argument "
"-DRDK_BUILD_CAIRO_SUPPORT=ON to cmake, and Qt support "
"-DRDK_BUILD_QT_SUPPORT=ON. To create an SVG file: (example13.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1158
msgid "The procedure for a PNG is slightly different: (example13.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1169
msgid ""
"The Python wrapper includes the function Chem.MolsToGridImage. There is, "
"as yet, no equivalent in the C++ version although test11DrawMolGrid in "
"$RDBASE/Code/GraphMol/MolDraw2D/test1.cpp shows that it can be achieved "
"relatively simply."
msgstr ""

#: ../../GettingStartedInC++.md:1176
msgid ""
"Substructure matching can be done using query molecules built from "
"SMARTS. (example14.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1194
msgid ""
"SubstructMatch returns a bool to flag whether there was a match, and "
"replaces the contents of res with a mapping of the atom indices in the "
"pattern and a set of atoms that match in the molecule. In the above "
"example, the output is:"
msgstr ""

#: ../../GettingStartedInC++.md:1202
msgid ""
"showing that atoms 0, 5 and 6 in the phenol matched the query. If the "
"pattern matches multiple times (as in this case, where 4, 5, 6 is also a "
"match), a single arbitrary set is returned."
msgstr ""

#: ../../GettingStartedInC++.md:1206
msgid "All possible matches can also be returned: (example14.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1221
msgid "This gives"
msgstr ""

#: ../../GettingStartedInC++.md:1227
msgid "It is easy to filter lists of molecules: (example14.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1243
msgid "There should be 22 matches in the file."
msgstr ""

#: ../../GettingStartedInC++.md:1245
msgid ""
"Substructure matching can also be done using molecules built from SMILES "
"instead of SMARTS: (example14.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1263
msgid ""
"But don't forget that the semantics of the two languages are not exactly "
"equivalent: (example14.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1296
msgid ""
"By default, information about stereochemistry is not used in substructure"
" searches: (example15.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1321
msgid ""
"All 3 SMARTS patterns match the molecule. To use the chirality "
"information, you need to pass true as the optional fourth parameter, "
"corresponding to useChirality: (example15.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1353
msgid ""
"Notice that when useChirality is true, a non-chiral query does match a "
"chiral molecule. The same is not true for a chiral query and a non-chiral"
" molecule: (example15.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1381
msgid ""
"It is possible to attach indices to the atoms in the SMARTS pattern. This"
" is most often done in reaction SMARTS (see Chemical Reactions), but is "
"more general than that. For example, in the SMARTS patterns for torsion "
"angle analysis published by Guba et al. [9] indices are used to define "
"the four atoms of the torsion of interest. This allows additional atoms "
"to be used to define the environment of the four torsion atoms, as in "
"[cH0:1][c:2]([cH0])!@[CX3!r:3]=[NX2!r:4] for an aromatic C=N torsion. We "
"might wonder in passing why they didn’t use recursive SMARTS for this, "
"which would have made life easier, but it is what it is. The atom lists "
"from GetSubstructureMatches are guaranteed to be in order of the SMARTS, "
"but in this case we’ll get five atoms so we need a way of picking out, in"
" the correct order, the four of interest. When the SMARTS is parsed, the "
"relevant atoms are assigned an atom map number property that we can "
"easily extract: (example16.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1423
msgid ""
"Then, when using the query on a molecule, you can get the indices of the "
"four matching atoms like this: (example16.cpp):"
msgstr ""

#: ../../GettingStartedInC++.md:1446
msgid ""
"As others have ranted about with more energy and eloquence than I intend "
"to, the definition of a molecule's smallest set of smallest rings is not "
"unique.  In some high symmetry molecules, a “true” SSSR will give results"
" that are unappealing.  For example, the SSSR for cubane only contains 5 "
"rings, even though there are “obviously” 6. This problem can be fixed by "
"implementing a small (instead of smallest) set of smallest rings "
"algorithm that returns symmetric results.  This is the approach that we "
"took with the RDKit."
msgstr ""

#: ../../GettingStartedInC++.md:1455
msgid ""
"Because it is sometimes useful to be able to count how many SSSR rings "
"are present in the molecule, there is a rdkit.Chem.rdmolops.GetSSSR "
"function, but this only returns the SSSR count, not the potentially non-"
"unique set of rings."
msgstr ""

